<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XYM</title>
  <subtitle>念念不忘，必有回响。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xymlife.com/"/>
  <updated>2016-11-04T07:32:42.000Z</updated>
  <id>http://xymlife.com/</id>
  
  <author>
    <name>XYM</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你真的理解Python中MRO算法吗？</title>
    <link href="http://xymlife.com/2016/05/22/python_mro/"/>
    <id>http://xymlife.com/2016/05/22/python_mro/</id>
    <published>2016-05-22T15:45:14.000Z</published>
    <updated>2016-11-04T07:32:42.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MRO（Method Resolution Order）：方法解析顺序&lt;/strong&gt;。&lt;br&gt;Python语言包含了很多优秀的特性，其中多重继承就是其中之一，但是多重继承会引发很多问题，比如二义性，Python中一切皆引用，这使得他不会像C++一样使用虚基类处理基类对象重复的问题，但是如果父类存在同名函数的时候还是会产生二义性，Python中处理这种问题的方法就是MRO。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u5386_u53F2_u4E2D_u7684MRO_u3011&quot;&gt;&lt;a href=&quot;#u3010_u5386_u53F2_u4E2D_u7684MRO_u3011&quot; class=&quot;headerlink&quot; title=&quot;【历史中的MRO】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【历史中的MRO】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;如果不想了解历史，只想知道现在的MRO可以直接看最后的C3算法，不过C3所解决的问题都是历史遗留问题，了解问题，才能解决问题，建议先看历史中MRO的演化。&lt;br&gt;&lt;strong&gt;Python2.2以前的版本：金典类（classic class）时代&lt;/strong&gt;&lt;br&gt;金典类是一种没有继承的类，实例类型都是type类型，如果经典类被作为父类，子类调用父类的构造函数时会出错。&lt;br&gt;&lt;strong&gt;这时MRO的方法为DFS（深度优先搜索（子节点顺序：从左到右））。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class A:   &lt;span class=&quot;comment&quot;&gt;# 是没有继承任何父类的&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;这是金典类&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;inspect.getmro（A）可以查看金典类的MRO顺序&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import inspect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class D:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(D)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(D)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(B, C)&lt;/span&gt;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print inspect.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getmro&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(A)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;  (&amp;lt;class __main__&lt;span class=&quot;class&quot;&gt;.A&lt;/span&gt; at &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x10e0e5530&amp;gt;, &amp;lt;class __main__&lt;span class=&quot;class&quot;&gt;.B&lt;/span&gt; at &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x10e0e54c8&amp;gt;, &amp;lt;class __main__&lt;span class=&quot;class&quot;&gt;.D&lt;/span&gt; at &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x10e0e53f8&amp;gt;, &amp;lt;class __main__&lt;span class=&quot;class&quot;&gt;.C&lt;/span&gt; at &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;x10e0e5460&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;MRO的DFS顺序如下图：  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/36071EB6-F4FF-46FA-99F2-F3A205FB7353.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;两种继承模式在DFS下的优缺点。&lt;/strong&gt;&lt;br&gt;第一种，我称为正常继承模式，两个互不相关的类的多继承，这种情况DFS顺序正常，不会引起任何问题；  &lt;/p&gt;
&lt;p&gt;第二种，棱形继承模式，存在公共父类（D）的多继承（有种D字一族的感觉），这种情况下DFS必定经过公共父类（D），这时候想想，如果这个公共父类（D）有一些初始化属性或者方法，但是子类（C）又重写了这些属性或者方法，那么按照DFS顺序必定是会先找到D的属性或方法，那么C的属性或者方法将永远访问不到，导致C只能继承无法重写（override）。这也就是为什么新式类不使用DFS的原因，因为他们都有一个公共的祖先object。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Python2.2版本：新式类（new-style class）诞生&lt;/strong&gt;&lt;br&gt;为了使类和内置类型更加统一，引入了新式类。新式类的每个类都继承于一个基类，可以是自定义类或者其它类，默认承于object。子类可以调用父类的构造函数。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这时有两种MRO的方法&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;1. 如果是金典类MRO为DFS（深度优先搜索（子节点顺序：从左到右））。&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;2. 如果是新式类MRO为BFS（广度优先搜索（子节点顺序：从左到右））。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Class A(object):   &lt;span class=&quot;comment&quot;&gt;# 继承于object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;这是新式类&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight autohotkey&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;literal&quot;&gt;A&lt;/span&gt;.__mro__ 可以查看新式类的顺序&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;MRO的BFS顺序如下图：&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/6C3FAA19-5C47-426D-9AB2-99789FAEBE6D.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两种继承模式在BFS下的优缺点。&lt;/strong&gt;&lt;br&gt;第一种，正常继承模式，看起来正常，不过实际上感觉很别扭，比如B明明继承了D的某个属性（假设为foo），C中也实现了这个属性foo，那么BFS明明先访问B然后再去访问C，但是为什么foo这个属性会是C？这种应该先从B和B的父类开始找的顺序，我们称之为单调性。&lt;/p&gt;
&lt;p&gt;第二种，棱形继承模式，这种模式下面，BFS的查找顺序虽然解了DFS顺序下面的棱形问题，但是它也是违背了查找的单调性。&lt;/p&gt;
&lt;p&gt;因为违背了单调性，所以BFS方法只在Python2.2中出现了，在其后版本中用C3算法取代了BFS。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Python2.3到Python2.7：金典类、新式类和平发展&lt;/strong&gt;&lt;br&gt;因为之前的BFS存在较大的问题，所以从Python2.3开始新式类的MRO取而代之的是C3算法，我们可以知道C3算法肯定解决了单调性问题，和只能继承无法重写的问题。C3算法具体实现稍后讲解。&lt;/p&gt;
&lt;p&gt;MRO的C3算法顺序如下图：看起简直是DFS和BFS的合体有木有。但是仅仅是看起来像而已。&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/7CA5DDFC-F5F4-4060-8B9F-21D123AB71E5.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Python3到至今：新式类一统江湖&lt;/strong&gt;&lt;br&gt;Python3开始就只存在新式类了，采用的MRO也依旧是C3算法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u795E_u5947_u7684_u7B97_u6CD5C3_u3011&quot;&gt;&lt;a href=&quot;#u3010_u795E_u5947_u7684_u7B97_u6CD5C3_u3011&quot; class=&quot;headerlink&quot; title=&quot;【神奇的算法C3】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【神奇的算法C3】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;C3算法解决了单调性问题和只能继承无法重写问题，在很多技术文章包括&lt;a href=&quot;https://www.python.org/download/releases/2.3/mro/#bad-method-resolution-orders&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;中的C3算法，都只有那个merge list的公式法，想看的话网上很多，自己可以查。但是从公式很难理解到解决这个问题的本质。我经过一番思考后，我讲讲我所理解的C3算法的本质。如果错了，希望有人指出来。&lt;/p&gt;
&lt;p&gt;假设继承关系如下(&lt;a href=&quot;https://www.python.org/download/releases/2.3/mro/#bad-method-resolution-orders&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;的例子)：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(D, F)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(E, D)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(B, C)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; __name__ == &lt;span class=&quot;string&quot;&gt;&#39;__main__&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;print&lt;/span&gt; A.__mro__&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;首先假设继承关系是一张图（事实上也是），我们按类继承是的顺序（class A(B, C)括号里面的顺序B，C），子类指向父类，构一张图。&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/4F0403FB-6FD7-4631-99A5-96FEE2C11FA7.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们要解决两个问题：单调性问题和不能重写的问题。&lt;br&gt;很容易发现要解决单调性，只要保证从根(A)到叶(object)，从左到右的访问顺序即可。&lt;br&gt;那么对于只能继承，不能重写的问题呢？先分析这个问题的本质原因，主要是因为先访问了子类的父类导致的。那么怎么解决只能先访问子类再访问父类的问题呢？如果熟悉图论的人应该能马上想到拓扑排序，这里引用一下百科的的定义:&lt;/p&gt;
&lt;p&gt;对一个有向无环图(Directed Acyclic Graph简称DAG)G进行拓扑排序，是将G中所有顶点排成一个线性序列，使得图中任意一对顶点u和v，若边(u,v)∈E(G)，则u在线性序列中出现在v之前。通常，这样的线性序列称为满足拓扑次序(Topological Order)的序列，简称拓扑序列。简单的说，由某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序。&lt;/p&gt;
&lt;p&gt;因为拓扑排序肯定是根到叶（也不能说是叶了，因为已经不是树了），所以只要满足从左到右，得到的拓扑排序就是结果，关于拓扑排序算法，大学的数据结构有教，这里不做讲解，不懂的可以自行谷歌或者翻一下书，建议了解完算法再往下看。&lt;/p&gt;
&lt;p&gt;那么模拟一下例子的拓扑排序：首先找入度为0的点，只有一个A，把A拿出来，把A相关的边剪掉，再找下一个入度为0的点，有两个点（B,C）,取最左原则，拿B，这是排序是AB，然后剪B相关的边，这时候入度为0的点有E和C，取最左。这时候排序为ABE，接着剪E相关的边，这时只有一个点入度为0，那就是C，取C，顺序为ABEC。剪C的边得到两个入度为0的点（DF），取最左D，顺序为ABECD，然后剪D相关的边，那么下一个入度为0的就是F，然后是object。那么最后的排序就为ABECDFobject。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight crystal&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;对比一下 &lt;span class=&quot;constant&quot;&gt;A&lt;/span&gt;.__mro__的结果&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&amp;lt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;__main__&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&#39;&amp;gt;, &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;span class=&quot;parent&quot;&gt;class&lt;/span&gt;&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;__main__&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&#39;&amp;gt;, &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;span class=&quot;parent&quot;&gt;class&lt;/span&gt;&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;__main__&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&#39;&amp;gt;, &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;span class=&quot;parent&quot;&gt;class&lt;/span&gt;&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;__main__&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;&#39;&amp;gt;, &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;span class=&quot;parent&quot;&gt;class&lt;/span&gt;&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;__main__&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;D&lt;/span&gt;&#39;&amp;gt;, &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;span class=&quot;parent&quot;&gt;class&lt;/span&gt;&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;__main__&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;&#39;&amp;gt;, &lt;span class=&quot;inheritance&quot;&gt;&amp;lt;&lt;span class=&quot;parent&quot;&gt;type&lt;/span&gt;&lt;/span&gt; &#39;&lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;&#39;&amp;gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;完全正确！&lt;br&gt;本应该就这里完了，但是后期一些细心的读者还是发现了问题。以上算法并不完全正确。感谢 @Tiger要好好写论文 指出。&lt;br&gt;下面我们来看看这个问题：Tiger指出了两点，一点是图中左右顺序比较难区分，还有一点是某种不可序列化的情况下，我的算法会有一些问题，针对这两点我做了改进。&lt;br&gt;先来看看出错的情况：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(A, B)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(B, A)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(C, D)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;构成对应的图，如下其中橙色的线是改进的地方。&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/AC8ED8BE-EB39-42AF-B94A-DCF4025EBB2A.png&quot; alt=&quot;改进版&quot;&gt;&lt;/p&gt;
&lt;p&gt;如果使用原来的算法，我们搞不清楚A和B谁在左边谁在右边，所以会选择其中之一,继续拓扑下去，其实这里已经是有歧义了不能够解析出正确的顺序，应该报错，这使我重新思考了左右的问题。&lt;br&gt;我们可以发现其中左右问题无非出现在两种情况，第一种情况是：图中E先继承C,再继承D；第二种情况是：先继承C的基类，再去继承D。针对这两种情况给出的方案就是图中添加的橙色的边，表示的是第一种情况的顺序问题,比如C-&amp;gt;D,就是表示E(C,D&amp;gt;中的继承顺序。&lt;br&gt;那么第二种情况怎么保证先C的基类，然后再考虑D呢。我们可以这么做，如果出现多个入度为0的点，我们先找是刚刚剪出来的点的基类的点。这里可以看之前官网的那个例子，在E点和C点选择的时候，因为E是B的基类点，所以先选它，其实这也很容易实现，只需要记录下每个节点的子类点（可能有多个）。&lt;br&gt;那么左右的问题也就解决了。  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最后欢迎大家订阅我的&lt;a href=&quot;http://xymlife.com&quot;&gt;博客&lt;/a&gt; &lt;a href=&quot;http://xymlife.com&quot;&gt;www.xymlife.com&lt;/a&gt; 或者开发者头条主题，你的支持是我前进的动力。共勉！喜欢就给个赞呗~&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;MRO（Method Resolution Order）：方法解析顺序&lt;/strong&gt;。&lt;br&gt;Python语言包含了很多优秀的特性，其中多重继承就是其中之一，但是多重继承会引发很多问题，比如二义性，Python中一切皆引用，这使得他不会像C++一样使用虚基类处理基类对象重复的问题，但是如果父类存在同名函数的时候还是会产生二义性，Python中处理这种问题的方法就是MRO。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u5386_u53F2_u4E2D_u7684MRO_u3011&quot;&gt;&lt;a href=&quot;#u3010_u5386_u53F2_u4E2D_u7684MRO_u3011&quot; class=&quot;headerlink&quot; title=&quot;【历史中的MRO】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【历史中的MRO】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;如果不想了解历史，只想知道现在的MRO可以直接看最后的C3算法，不过C3所解决的问题都是历史遗留问题，了解问题，才能解决问题，建议先看历史中MRO的演化。&lt;br&gt;&lt;strong&gt;Python2.2以前的版本：金典类（classic class）时代&lt;/strong&gt;&lt;br&gt;金典类是一种没有继承的类，实例类型都是type类型，如果经典类被作为父类，子类调用父类的构造函数时会出错。&lt;br&gt;&lt;strong&gt;这时MRO的方法为DFS（深度优先搜索（子节点顺序：从左到右））。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="class" scheme="http://xymlife.com/tags/class/"/>
    
      <category term="mixin" scheme="http://xymlife.com/tags/mixin/"/>
    
      <category term="mro" scheme="http://xymlife.com/tags/mro/"/>
    
      <category term="python" scheme="http://xymlife.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud初体验</title>
    <link href="http://xymlife.com/2016/03/21/GoogleCloud/"/>
    <id>http://xymlife.com/2016/03/21/GoogleCloud/</id>
    <published>2016-03-21T06:51:14.000Z</published>
    <updated>2016-03-21T06:59:52.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;废话不多说，先上一图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/IMG_2245%20%281%29.JPG&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;没有看错，速度很快，相对比较稳定，白天基本是100ms以内，晚上的时候会慢，点ping值差不多150ms左右，不过速度也算快的了。最主要的是他的最低配置只要5美元（共享cpu，0.6G内存，10G存储空间），很适合用来翻墙。不过高一档次的配置（内存1.75G）就要15美元了。穷人的话（比如我），可以考虑添加Swap弥补一下内存不足，土豪随意。现在新用户有送300美元试用金额，2个月后就要交钱了。有兴趣听我安利的请继续。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;u3010_u51C6_u5907_u3011&quot;&gt;&lt;a href=&quot;#u3010_u51C6_u5907_u3011&quot; class=&quot;headerlink&quot; title=&quot;【准备】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【准备】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;一台能翻墙的电脑，因为我们在中国，如果没有你可以找能翻墙的教你，或者去找找一些试用vpn或者交一个月的钱。&lt;/li&gt;
&lt;li&gt;一个谷歌账号，和上一点息息相关。&lt;/li&gt;
&lt;li&gt;一张visa的信用卡，需要绑定信用卡。&lt;/li&gt;
&lt;li&gt;一颗耐心。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;准备好了以上东西，那就可以申请一台属于你的vps了。&lt;br&gt;首先访问&lt;a href=&quot;https://cloud.google.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;cloud.google.com&lt;/a&gt;，如果正常说明你翻墙成功了，不正常请继续尝试翻墙。&lt;br&gt;这里提醒一下，本人选的是asia-east1-c机房，经过测试ip是100~110段的网速最好，大家可以刷，但是不要太过分哦。&lt;br&gt;接下来的申请流程我就不说，这里推荐一个详细的流程 &lt;a href=&quot;https://github.com/kaiye/kaiye.github.com/issues/9&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/kaiye/kaiye.github.com/issues/9&lt;/a&gt; 如果你只是想搭个vps，这篇文章已经够了，下面的东西可以不用再看了。如果你想让它变成正常服务器使用，请继续看下去。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u914D_u7F6E_u672C_u5730ssh_u767B_u5F55_u3011&quot;&gt;&lt;a href=&quot;#u3010_u914D_u7F6E_u672C_u5730ssh_u767B_u5F55_u3011&quot; class=&quot;headerlink&quot; title=&quot;【配置本地ssh登录】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【配置本地ssh登录】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Google Cloud提供了4种ssh的方法：浏览器视窗ssh，通过自定通讯协议在浏览器视窗的ssh（这个没用过），使用gcloud登录（使用Google Cloud的sdk登录），其他ssh用户端（我们本地的终端）。前面三种不是很推荐，理由很简单，比较卡。最后本地ssh才是我们的正确姿势啊。不过官网推荐的方法都是基于gcloud把公匙传上去，而使用gcloud还要终端翻墙，如果你想用gcloud，推荐终端翻墙代理privoxy。这里推荐另一种非官方方法。&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;1.本地无密登陆&lt;/strong&gt;&lt;br&gt; 首先我们使用第一种方法使用浏览器窗ssh（之前推荐的文章里使用的ssh方法），接着我们可以把我们本地的ssh的pub_key（一般是我们本地 ~/.ssh/id_rsa.pub里面的内容）&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat ~/.ssh/id_rsa.pub  //本地终端&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;copy输入结果（公匙）到服务器的~/.ssh/authorized_keys文件的最后。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim .ssh/authorized_keys  //在最后添加前面copy的公匙&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样你就可以直接在本地 ssh 登陆了。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh user@ip //user是你之前浏览器窗看到的那个user，一般是g开头，ip就是你这台机的ip&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.用户和密码登陆&lt;/strong&gt;&lt;br&gt;通过前面的无密登陆ssh上服务器，接着配置多用户和密码登陆，因为无密登陆那个user并不是你自己创建的，是系统生成给你的。我们现在给自己创建一个用户，并开启密码登陆。&lt;br&gt;首先去掉/etc/nologin文件，这个文件会让之后创建的用户不能登陆。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mv /etc/nologin /etc/nologin.backup&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后要开启密码验证检查，也就是密码登陆。&lt;br&gt;将/etc/ssh/sshd_config文件中的PasswordAuthentication no 改为PasswordAuthentication yes&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/ssh/sshd_config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PasswordAuthentication yes  //找到PasswordAuthentication no改成yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在可以创建用户，通过密码登陆了。以下操作记得sudo&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;groupadd users //创建用户组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useradd -m -g users &lt;span class=&quot;operator&quot;&gt;-s&lt;/span&gt; /bin/bash xym  //添加用户到组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;passwd xym  //添加用户密码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/sudoers  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;然后在文件后面添加 xym ALL=(ALL) ALL  //添加用户的sudo权限&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接着你就可以很爽的使用ssh了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u6DFB_u52A0Swap_u3011&quot;&gt;&lt;a href=&quot;#u3010_u6DFB_u52A0Swap_u3011&quot; class=&quot;headerlink&quot; title=&quot;【添加Swap】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【添加Swap】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;自带的0.6G内存肯定是不够用的，所以我们要使用swap空间，但是刚刚申请的服务器是没有swap空间的，这时我们要自己挂载一个swap。具体操作如下：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo fallocate &lt;span class=&quot;operator&quot;&gt;-l&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;G /swapfile  //一般为当前内存的两倍，这里我取&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;G&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo chmod &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt; /swapfile  //锁定文件权限&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo mkswap /swapfile  //生成swap空间&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo swapon /swapfile  //开启swap功能&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;free -m  //查看是否有swap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;到这里基本成功了，但是重启后系统不会自动挂载刚刚的swap文件，所以我们要加入到fstab。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/fstab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最后一行添加&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/swapfile   none    swap    sw    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;   &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u8C03_u4F18_u3011&quot;&gt;&lt;a href=&quot;#u3010_u8C03_u4F18_u3011&quot; class=&quot;headerlink&quot; title=&quot;【调优】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【调优】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. swappiness&lt;/strong&gt;&lt;br&gt;通过swappiness可以调节是积极的使用内存（趋近0）还是积极的使用swap（趋近100），默认swappiness=60，大部分推荐改为swappiness=10，我这里也配成10，减少内存和swap的页交换嘛，大家看需要而定。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo sysctl vm.swappiness=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;  //设定当前环境swappiness的值，但是重启失效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/sysctl.conf  //启动配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最后一行添加&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm.swappiness=&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. vfs_cache_pressure&lt;/strong&gt;&lt;br&gt;通过vfs_cache_pressure调整文件在缓存中交换的频率，默认为100，是比较频繁的交换inode信息，可以设置为50。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo sysctl vm.vfs_cache_pressure=&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;  //设定当前环境vfs_cache_pressure的值，但是重启失效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo vim /etc/sysctl.conf  //启动配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;最后一行添加&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm.vfs_cache_pressure = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u5176_u4ED6_u3011&quot;&gt;&lt;a href=&quot;#u3010_u5176_u4ED6_u3011&quot; class=&quot;headerlink&quot; title=&quot;【其他】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【其他】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Google Cloud 也有一些坑爹的东西，比如他把25号端口（SMTP）给永远封了，如果想发邮件建议使用mailgun。不过整体来说是一个快速稳定的服务器。反正一句话：你，值得拥有。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;废话不多说，先上一图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/IMG_2245%20%281%29.JPG&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;没有看错，速度很快，相对比较稳定，白天基本是100ms以内，晚上的时候会慢，点ping值差不多150ms左右，不过速度也算快的了。最主要的是他的最低配置只要5美元（共享cpu，0.6G内存，10G存储空间），很适合用来翻墙。不过高一档次的配置（内存1.75G）就要15美元了。穷人的话（比如我），可以考虑添加Swap弥补一下内存不足，土豪随意。现在新用户有送300美元试用金额，2个月后就要交钱了。有兴趣听我安利的请继续。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="GoogleCloud" scheme="http://xymlife.com/tags/GoogleCloud/"/>
    
  </entry>
  
  <entry>
    <title>打造自己的Python编码环境</title>
    <link href="http://xymlife.com/2016/02/07/%E6%89%93%E9%80%A0%E8%87%AA%E5%B7%B1%E7%9A%84Python%E7%BC%96%E7%A0%81%E7%8E%AF%E5%A2%83/"/>
    <id>http://xymlife.com/2016/02/07/打造自己的Python编码环境/</id>
    <published>2016-02-07T15:35:14.000Z</published>
    <updated>2016-05-28T12:59:01.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;趁着放假，重新配置了一下自己的Mac的编程环境，毕竟新年新气象嘛，主要是iTerm2、Zsh、Vim优化、Consolas字体、NoisyTyper，这些的相关配置。工欲利其事必先利其器，好的编码环境可以提升我们的打码的幸福感。好的编码环境包括&lt;strong&gt;美观（视觉），声音（听觉），流畅度（触觉），工作环境（嗅觉，味觉）&lt;/strong&gt;等多个方面。后面有几张配置后的图片感受一下，主要看字体和配色&lt;strong&gt;（有些人可能觉得比较丑，个人喜欢黑紫，配色和字体有很多选择，各有所好，求别喷 XD）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Zsh效果&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/A7B15512-47CB-4A87-B88B-89DF5316B7BD%20%281%29.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;Vim效果&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/0F91C711-1176-420B-9281-66EDA531D77A%20(1).png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;u3010_u51C6_u5907_u9636_u6BB5_uFF1A_u5668_u3011&quot;&gt;&lt;a href=&quot;#u3010_u51C6_u5907_u9636_u6BB5_uFF1A_u5668_u3011&quot; class=&quot;headerlink&quot; title=&quot;【准备阶段：器】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【准备阶段：器】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.iterm2.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2&lt;/a&gt;：是os系统中的一个替代终端。主要优点：屏幕分割（可以水平分割和垂直分割），选中即复制，快速查找(command+f)，配色字体自定义化，自定义快捷键等。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=utDFn9oCVk-dT0d2N2XvU1ANs3zjcYaALYGvGJpkgXKR80e9Hdt-nZCn5iWwPtFNBOSdRenPcjarpmb92GhNJ_&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Consolas&lt;/a&gt;：微软下最好看的字体之一，个人认为很适合程序员，除开字体好看外，主要原因是它的数字“0”字加入了一斜撇，以方便与字母“o”分辨。这也是我和它结缘的主要缘由，当年在某次acm比赛中，就是因为肉眼无法分辨是0还是o，遗憾至今。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Zsh_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zsh&lt;/a&gt;：zsh和bash一样是Shell的一种。相比bash：更高效、更好的自动补全、更好的文件名展开（通配符展开）、更好的数组处理、可定制性高。mac下自带了zsh，无需再安装。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://baike.baidu.com/link?url=6wOFRZ2btdRojE5FRHpiKOha3iVW5EdgUCc9kHFB_IPOWUQ_XABhwqIVBGQ-qqzb2iE6aVjzY4WAWq3R2fxlHbbm0ad0Ldf9ATai7B_ay5K&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Vim&lt;/a&gt;：是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。和Emacs并列成为类Unix系统用户最喜欢的编辑器。估计大家都很熟悉，不做累述。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.douban.com/subject/14327967/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;NoisyTyper&lt;/a&gt;：一款提升你打字逼格的软件，可以让你打字的时候发出打字机的声音，咔咔咔这样。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;上面几个安装都比较简单，教程也比较多。这里主要讲一下mac下consolas字体的安装。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew install cabextract&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ~/Downloads&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ mkdir consolas&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; consolas&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ curl -O http://download.microsoft.com/download/f/&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;/a/f5a3df76&lt;span class=&quot;operator&quot;&gt;-d&lt;/span&gt;856-&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;a61&lt;span class=&quot;operator&quot;&gt;-a&lt;/span&gt;6bd-&lt;span class=&quot;number&quot;&gt;722&lt;/span&gt;f52a5be26/PowerPointViewer.exe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cabextract PowerPointViewer.exe&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ cabextract ppviewer.cab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ open CONSOLA*.TTF&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;最后按下弹出窗口的安装键就ok了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u6253_u78E8_u9636_u6BB5_uFF1A_u5229_u5668_u3011&quot;&gt;&lt;a href=&quot;#u3010_u6253_u78E8_u9636_u6BB5_uFF1A_u5229_u5668_u3011&quot; class=&quot;headerlink&quot; title=&quot;【打磨阶段：利器】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【打磨阶段：利器】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;上面的工具准备好了后，就可以开始配置这些工具了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Zsh配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;oh-my-zsh&lt;/a&gt;：一套强大的开源zsh配置文件。安装如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 使用curl安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sh -c &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&lt;/span&gt;&quot;&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 或者使用wget安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sh -c &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 安装后重新载入配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; .zshrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh/wiki/themes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;oh-my-zsh主题&lt;/a&gt;： oh-my-zsh有多款配套主题，点击前面的主题链接可以看到所有主题。这里主要介绍下agnoster主题。修改zsh配置文件（~/.zshrc）中的主题属性为agnoster即可。官方图如下：&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/70f58fb6-ba03-11e4-82c9-c083bf9a6574%20(1).png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt; 安装这个主题需要额外安装&lt;a href=&quot;https://github.com/powerline/fonts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;powerline&lt;/a&gt;字体，不然会显示乱码。如果你想隐藏自己的用户名信息，需要在zsh配置文件中设置默认用户。具体安装配置如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 修改zsh配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ vim ~/.zshrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ZSH_THEME=&lt;span class=&quot;string&quot;&gt;&quot;agnoster&quot;&lt;/span&gt;  //在.zshrc中修改ZSH_THEME&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  DEFAULT_USER=username // 在.zshrc中添加或者修改默认用户为自己，开启终端后就不会显示自己的用户名信息&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ~/.zshrc       // 重新载入配置文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// poweline font 安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/powerline/fonts.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; powerline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./install.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;iTerm2配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/powerline/fonts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;字体&lt;/a&gt;：接着要在iterm2的Perferences中Text中选择常规字体 为consolas字体或者其他你喜欢的字体，非ASCII码字体为powerline字体（&lt;strong&gt;一定要是名字中带powerline的字体，不然还是乱码&lt;/strong&gt;）。如下：&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/2D7615C4-0257-4C4A-97D2-496929B9E334%20(1).jpeg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mbadolato/iTerm2-Color-Schemes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iTerm2配色&lt;/a&gt;：从&lt;a href=&quot;https://github.com/mbadolato/iTerm2-Color-Schemes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;可以获取很多别人的配色主题，把整个项目git clone下来，然后在iterm2的Perferences中的Colors最下面的Load Presets中import git下来的schemes文件夹里面itermcolors后缀的文件，自己可以根据自己喜欢调整自己喜欢的颜色，我选的是Fish Tank，我自己微调了一些配色。如下：&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/A7B15512-47CB-4A87-B88B-89DF5316B7BD%20%281%29.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vim配置&lt;/strong&gt;&lt;br&gt;之前一直用spf13，但是打开大文件太卡了，所以自己重新配置了一份。实测打开8000+行代码的文件，因为语法检测，所以大概延时1s左右，之后操作很顺畅。在配置过程中会遇到很多蛋疼的地方。需要比较系统的学习一下vim脚本的语法和相关配置方法，vim网上很多配置好文，如&lt;a href=&quot;https://github.com/yangyangwithgnu/use_vim_as_ide&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《像 IDE 一样使用 vim》&lt;/a&gt;，还有&lt;a href=&quot;http://vimdoc.sourceforge.net&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《vim 脚本学习文档》&lt;/a&gt;，我就不累述了，配置文件的注释写的比较详细。我的配置主要针对python开发，另外需要额外安装python包flake8。具体如下：&lt;/p&gt;
&lt;p&gt;vimrc文件，主要是vim基础配置。(highlight.js不支持vim script，有点蛋疼)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;270&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&quot; 相关vim脚本文档 http://vimdoc.sourceforge.net&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 相关好文 https://github.com/yangyangwithgnu/use_vim_as_ide&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 导入vim插件管理文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if filereadable(expand(&quot;~/.vimrc.bundles&quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    source ~/.vimrc.bundles&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 基本配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set nocompatible &quot;不要vim模仿vi模式，建议设置，否则会有很多不兼容的问题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set mouse=a      &quot; 启动鼠标所有模式，但是右键功能不可用, 可以保证鼠标滚屏在当前屏幕内&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set mousehide    &quot; 输入文件时隐藏鼠标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set backspace=indent,eol,start   &quot; 退格键分别可删除缩进，上一行结束，insert之前的字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set showmatch     &quot; 设置匹配模式 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set nobackup      &quot; 不备份&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set nowritebackup &quot; 不写入备份文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set noswapfile    &quot; 关闭交换文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set history=500	  &quot; history存储长&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set ruler         &quot; 显示标尺 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set showcmd       &quot; 显示输入命令 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set incsearch     &quot; 搜索时自动匹配 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set hlsearch      &quot; 高亮搜索项 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set ignorecase    &quot; 无视大小写 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set smartcase     &quot; 如果有大写就区别大小写匹配 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set laststatus=2  &quot; 总是显示状态栏 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; set autowrite     &quot; 切换文件自动保存 https://github.com/terryma/vim-multiple-cursors/raw/master/assets/example1.gif?raw=true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set shortmess=atI&quot;  &quot; 关闭欢迎页面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set viewoptions=cursor,folds,slash,unix &quot; viminfo 记录的内容&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set virtualedit=onemore             &quot; 光标可以移到当行最后一个字符之后 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set hidden                          &quot; 切换文件不保存，隐藏 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;set confirm       &quot; 退出前验证&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; set spell         &quot; 拼写检查&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set linespace=0   &quot; 行之间没有多余的空格&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set wildmenu      &quot; 自动补全时的文件菜单&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set wildmode=list:longest,full &quot; 自动补全时，匹配最长子串，列出文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set whichwrap=b,s,h,l,&amp;lt;,&amp;gt;,[,]  &quot; 行尾可右移到下行，行首左移到上行,b：退格，s：空格，hl：左右，&amp;lt;&amp;gt;：n/v模式下的左右，[]：i/r模式下的左右&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set scrolljump=5  &quot; 光标离开屏幕范围 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set scrolloff=3   &quot; 光标移动至少保留行数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 格式&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set nowrap        &quot; 取消自动折行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;set smarttab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set tabstop=4     &quot; tab=4空格 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set softtabstop=4 &quot; 回退可以删除缩进 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set shiftwidth=4  &quot; 缩进位宽=4个空格位&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set autoindent    &quot; 自动缩进 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set expandtab     &quot; tab由空格表示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set nojoinspaces  &quot; 用J合并两行用一个空格隔开&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set splitright    &quot; 用vsplit新建窗口，让新的放右边&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set splitbelow    &quot; 用split新建窗口，让新的放下面&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set pastetoggle=&amp;lt;F12&amp;gt; &quot; 指定F12进入黏贴模式，可以正常复制缩进&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set iskeyword-=.  &quot; 让&#39;.&#39; 作为单词分割符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set iskeyword-=#  &quot; 让&#39;#&#39; 作为单词分割符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set iskeyword-=-  &quot; 让&#39;-&#39; 作为单词分割符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set listchars=tab:›\ ,trail:•,extends:#,nbsp:. &quot; 空格等无效字符显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set textwidth=80  &quot; 内容宽度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set fileencodings=utf-8,gb18030,gbk,big5 &quot; 文件编码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 开启新的buffer时，自动转到对应文件目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:autochdir = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if exists(&#39;g:autochdir&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    autocmd BufEnter * if bufname(&quot;&quot;) !~ &quot;^\[A-Za-z0-9\]*://&quot; | lcd %:p:h | endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 设置u的返回步数限制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if has(&#39;persistent_undo&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set undofile               &quot; 开启u回滚文件记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set undolevels=1000         &quot; 最大数量的改变回滚&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    set undoreload=10000        &quot; 最大数量重载可回滚行数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 特殊文件打开&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd BufNewFile,BufRead *.py,*.pyw set filetype=python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd BufNewFile,BufRead *.html.twig set filetype=html.twig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd FileType haskell setlocal expandtab shiftwidth=2 softtabstop=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd BufNewFile,BufRead *.coffee set filetype=coffee&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd FileType haskell setlocal commentstring=--\ %s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd FileType haskell setlocal nospell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; key 映射&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let mapleader = &#39;,&#39;         &quot; 全局leader设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let maplocalleader = &#39;_&#39;    &quot; 本地leader设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 设置tag和window间快速跳转 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:easyWindows = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if exists(&#39;g:easyWindows&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot; 向上&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    map &amp;lt;C-J&amp;gt; &amp;lt;C-W&amp;gt;j&amp;lt;C-W&amp;gt;_  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot; 向下&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    map &amp;lt;C-K&amp;gt; &amp;lt;C-W&amp;gt;k&amp;lt;C-W&amp;gt;_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot; 向右&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    map &amp;lt;C-L&amp;gt; &amp;lt;C-W&amp;gt;l&amp;lt;C-W&amp;gt;_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &quot; 向左&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    map &amp;lt;C-H&amp;gt; &amp;lt;C-W&amp;gt;h&amp;lt;C-W&amp;gt;_&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 处理折叠行的左右移动&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;noremap j gj&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;noremap k gk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 没sudo却想保存&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cmap w!! w !sudo tee % &amp;gt;/dev/null&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; ,fc查找冲突的地方&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map &amp;lt;leader&amp;gt;fc /\v^[&amp;lt;\|=&amp;gt;]&amp;#123;7&amp;#125;( .*\|$)&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; ,ff 查找光标后的单词位置，列出选择项&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nmap &amp;lt;Leader&amp;gt;ff [I:let nr = input(&quot;Which one: &quot;)&amp;lt;Bar&amp;gt;exe &quot;normal &quot; . nr .&quot;[\t&quot;&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 屏幕左移和右移&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map zl zL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map zh zH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 映射vsp这些开启新的buffer,默认目录为当前目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cnoremap %% &amp;lt;C-R&amp;gt;=fnameescape(expand(&#39;%:h&#39;)).&#39;/&#39;&amp;lt;cr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map &amp;lt;leader&amp;gt;ew :e %%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map &amp;lt;leader&amp;gt;es :sp %%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map &amp;lt;leader&amp;gt;ev :vsp %%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map &amp;lt;leader&amp;gt;et :tabe %%&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 黏贴板&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if has(&#39;clipboard&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if has(&#39;unnamedplus&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set clipboard=unnamedplus&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set clipboard=unnamed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;字体的设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set guifont=Consolas,Bitstream_Vera_Sans_Mono:h9:cANSI &quot;设置gui下的字体&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set gfw=幼圆:h10:cGB2312&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 语法高亮&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;syntax on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 缩进和md文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;filetype plugin indent on &quot; 自动根据类型启动对应插件，缩进开启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 设置主题,UI&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; solarized 主题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set background=dark&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if filereadable(expand(&quot;~/.vim/bundle/vim-colors-solarized/colors/solarized.vim&quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	let g:solarized_termcolors=256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	let g:solarized_termtrans=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	let g:solarized_contrast=&quot;normal&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	let g:solarized_visibility=&quot;normal&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	color solarized             &quot; Load a colorscheme&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set cursorline &quot; 选中行高亮 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd BufEnter *.py set cc=81 &quot; 打开py文件81行高亮  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 之前的高亮线太难看，重新制定颜色，这里的black和iterm2颜色配置中的black一样&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hi CursorLine   cterm=NONE ctermbg=black guibg=black  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hi CursorColumn   cterm=NONE ctermbg=black guibg=black &quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;highlight ColorColumn ctermbg=black guibg=black&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set number &quot; 设置行号&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hi LineNr ctermbg=black&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; Indent Guides 缩进列对齐线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:indent_guides_start_level = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:indent_guides_guide_size = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:indent_guides_enable_on_vim_startup = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; airline 就是状态栏的箭头&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:airline_theme=&quot;dark&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:airline_powerline_fonts = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:airline#extensions#tabline#enabled = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:airline#extensions#tabline#buffer_nr_show = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; NerdTree配置 control+e打开当前文件目录树&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map &amp;lt;C-e&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map &amp;lt;leader&amp;gt;ee :NERDTreeToggle&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nmap &amp;lt;leader&amp;gt;nt :NERDTreeFind&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let NERDTreeShowBookmarks=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let NERDTreeIgnore=[&#39;\.pyc&#39;, &#39;\~$&#39;, &#39;\.swo$&#39;, &#39;\.swp$&#39;, &#39;\.git&#39;, &#39;\.hg&#39;, &#39;\.svn&#39;, &#39;\.bzr&#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let NERDTreeChDirMode=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let NERDTreeQuitOnOpen=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let NERDTreeMouseMode=2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let NERDTreeShowHidden=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let NERDTreeKeepTreeInNewTab=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:nerdtree_tabs_open_on_gui_startup=0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; syntastic 配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 设置每次w保存后语法检查&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function! ToggleErrors()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Errors&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endfunction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:syntastic_check_on_open=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:syntastic_always_populate_loc_list = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:syntastic_auto_loc_list = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:syntastic_check_on_wq = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let syntastic_loc_list_height = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let g:syntastic_html_tidy_ignore_errors=[&quot; proprietary attribute \&quot;ng-&quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd WinEnter * if &amp;amp;buftype ==#&#39;quickfix&#39; &amp;amp;&amp;amp; winnr(&#39;$&#39;) == 1 | quit |endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd WinLeave * lclose&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; 自动补全tab触发&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function! InsertTabWrapper()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	let col = col(&#39;.&#39;) - 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if !col || getline(&#39;.&#39;)[col - 1] !~ &#39;\k&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &quot;\&amp;lt;tab&amp;gt;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return &quot;\&amp;lt;c-p&amp;gt;&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endfunction&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inoremap &amp;lt;Tab&amp;gt; &amp;lt;c-r&amp;gt;=InsertTabWrapper()&amp;lt;cr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inoremap &amp;lt;S-Tab&amp;gt; &amp;lt;c-n&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; Ctrlp 和 Ctrlp-funky(,fu)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if isdirectory(expand(&quot;~/.vim/bundle/ctrlp.vim/&quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let g:ctrlp_working_path_mode = &#39;ra&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nnoremap &amp;lt;silent&amp;gt; &amp;lt;D-t&amp;gt; :CtrlP&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    nnoremap &amp;lt;silent&amp;gt; &amp;lt;D-r&amp;gt; :CtrlPMRU&amp;lt;CR&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let g:ctrlp_custom_ignore = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                \ &#39;dir&#39;:  &#39;\.git$\|\.hg$\|\.svn$&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                \ &#39;file&#39;: &#39;\.exe$\|\.so$\|\.dll$\|\.pyc$&#39; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if executable(&#39;ag&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let s:ctrlp_fallback = &#39;ag %s --nocolor -l -g &quot;&quot;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    elseif executable(&#39;ack-grep&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let s:ctrlp_fallback = &#39;ack-grep %s --nocolor -f&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    elseif executable(&#39;ack&#39;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let s:ctrlp_fallback = &#39;ack %s --nocolor -f&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot; On Windows use &quot;dir&quot; as fallback command.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let s:ctrlp_fallback = &#39;find %s -type f&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if exists(&quot;g:ctrlp_user_command&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unlet g:ctrlp_user_command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let g:ctrlp_user_command = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                \ &#39;types&#39;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                \ 1: [&#39;.git&#39;, &#39;cd %s &amp;amp;&amp;amp; git ls-files . --cached --exclude-standard --others&#39;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                \ 2: [&#39;.hg&#39;, &#39;hg --cwd %s locate -I .&#39;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                \ &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                \ &#39;fallback&#39;: s:ctrlp_fallback&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                \ &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if isdirectory(expand(&quot;~/.vim/bundle/ctrlp-funky/&quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot; CtrlP extensions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let g:ctrlp_extensions = [&#39;funky&#39;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &quot;funky&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nnoremap &amp;lt;Leader&amp;gt;fu :CtrlPFunky&amp;lt;Cr&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot; complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd Filetype * if &amp;amp;omnifunc == &quot;&quot; | setlocal omnifunc=syntaxcomplete#Complete | endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd FileType python setlocal omnifunc=pythoncomplete#Complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;进行版权声明的设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&quot;添加或更新头&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;map &amp;lt;F4&amp;gt; :call TitleDet()&amp;lt;cr&amp;gt;&#39;s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;autocmd BufNewFile *.py :call AddTitle()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function AddTitle()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    call append(0,&quot;#! /usr/bin/env python&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    call append(1,&quot;# -*- coding: utf-8 -*-&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    call append(2,&quot;# vim:fenc=utf-8&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    call append(3,&quot;#  Copyright © XYM&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    call append(4,&quot;# CreateTime: &quot;.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    call append(5,&quot;&quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;endf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let python_highlight_all = 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;vimrc.bundles文件，主要是vim相关插件&lt;br&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &amp;amp;compatible&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; nocompatible&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;filetype&lt;/span&gt; off&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;set&lt;/span&gt; rtp+=~/.&lt;span class=&quot;keyword&quot;&gt;vim&lt;/span&gt;/bundle/vundle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;call&lt;/span&gt; vundle#rc()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&quot;gmarik/vundle&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 星级越多越推荐, 5星为必选，4星强烈推荐，3星比较推荐&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot; 文件模糊匹配查找 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&quot;kien/ctrlp.vim&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 函数模糊匹配查找(,fu) 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;tacahiroy/ctrlp-funky&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 文件索引树 推荐：*****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&quot;scrooloose/nerdtree&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 自动注释 推荐：*****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;scrooloose/nerdcommenter&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 语法检查 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&quot;scrooloose/syntastic&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 括号自动匹配 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;jiangmiao/auto-pairs&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 引号处理 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;tpope/vim-surround&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 光标多行编辑 &amp;lt;C-n&amp;gt; &amp;lt;C-x&amp;gt; &amp;lt;C-p&amp;gt; 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;terryma/vim-multiple-cursors&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 配色主题 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&quot;altercation/vim-colors-solarized&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 缩进引导线 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&quot;nathanaelkane/vim-indent-guides&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 文本同级文字选取，和文本处理 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;kana/vim-textobj-indent&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;kana/vim-textobj-user&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 保存vim编辑信息，比如最后的位置 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&quot;vim-scripts/restore_view.vim&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; 状态栏效果 推荐：***&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&quot;bling/vim-airline&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; python 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;yssource/python.vim&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;python_match.vim&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;pythoncomplete&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;hdima/python-syntax&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;hynek/vim-python-pep8-indent&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; js 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;elzr/vim-json&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;groenewege/vim-less&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;pangloss/vim-javascript&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;briancollins/vim-jst&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;kchmck/vim-coffee-script&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot; html 推荐：****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;amirh/HTML-AutoCloseTag&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;hail2u/vim-css3-syntax&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;gorodinskiy/vim-coloresque&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;tpope/vim-haml&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Bundle &lt;span class=&quot;string&quot;&gt;&#39;mattn/emmet-vim&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;filereadable&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;expand&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;~/.vimrc.bundles.local&quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;source&lt;/span&gt; ~/.vimrc.bundles.local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;filetype&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;on&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u603B_u7ED3_u3011&quot;&gt;&lt;a href=&quot;#u3010_u603B_u7ED3_u3011&quot; class=&quot;headerlink&quot; title=&quot;【总结】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【总结】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;一个好的程序员必须善用各种工具提升自己的开发效率，和提升自己的幸福指数。另外，个人觉得vim还是值得自己重新一配的，我的配置过程基本都是在读spf13的配置，读懂，然后选取，可是中间还是出了很多问题，比如因为我没有用pymode插件，所以在用括syntastic的local_list在退出或者分屏时的位置，都令我很蛋疼。而且在读spf13配置时，会发现有很多很好的功能都没有用上，比如paste模式，查找冲突快捷键，屏幕移动，还有ctrlp-funky，vim-multiple-cursors这些很爽的插件。大家有好的配置可以推荐给我。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;趁着放假，重新配置了一下自己的Mac的编程环境，毕竟新年新气象嘛，主要是iTerm2、Zsh、Vim优化、Consolas字体、NoisyTyper，这些的相关配置。工欲利其事必先利其器，好的编码环境可以提升我们的打码的幸福感。好的编码环境包括&lt;strong&gt;美观（视觉），声音（听觉），流畅度（触觉），工作环境（嗅觉，味觉）&lt;/strong&gt;等多个方面。后面有几张配置后的图片感受一下，主要看字体和配色&lt;strong&gt;（有些人可能觉得比较丑，个人喜欢黑紫，配色和字体有很多选择，各有所好，求别喷 XD）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Zsh效果&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/A7B15512-47CB-4A87-B88B-89DF5316B7BD%20%281%29.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;Vim效果&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/0F91C711-1176-420B-9281-66EDA531D77A%20(1).png&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Mac/python" scheme="http://xymlife.com/tags/Mac-python/"/>
    
      <category term="consolas" scheme="http://xymlife.com/tags/consolas/"/>
    
      <category term="iterm2" scheme="http://xymlife.com/tags/iterm2/"/>
    
      <category term="vim" scheme="http://xymlife.com/tags/vim/"/>
    
      <category term="zsh" scheme="http://xymlife.com/tags/zsh/"/>
    
  </entry>
  
  <entry>
    <title>用redis实现有优先级的&quot;celery&quot;</title>
    <link href="http://xymlife.com/2016/01/24/%E7%94%A8redis%E5%AE%9E%E7%8E%B0%E6%9C%89%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84celery/"/>
    <id>http://xymlife.com/2016/01/24/用redis实现有优先级的celery/</id>
    <published>2016-01-23T17:07:13.000Z</published>
    <updated>2016-01-23T17:10:27.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;u3010_u9700_u6C42_u80CC_u666F_u3011&quot;&gt;&lt;a href=&quot;#u3010_u9700_u6C42_u80CC_u666F_u3011&quot; class=&quot;headerlink&quot; title=&quot;【需求背景】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【需求背景】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;对于异步任务处理，相信很多人首选&lt;a href=&quot;http://docs.jinkan.org/docs/celery/getting-started/introduction.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;celery&lt;/a&gt;，的确，celery处理异步任务非常强悍，使用简单，支持各种并发。但是，大家来看看我所遇到的一个应用场景：每次后台上传一个游戏母包，然后对这个母包处理（添加某种标识，比如id）生成多个游戏子包，其中有一些id号的包是要求尽快的处理的，剩下的可以闲时处理。这里就对要把一个母包分成两个任务来处理，其中一个是优先处理的，另一个是闲时处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;u3010_u65B9_u6848_u521D_u63A2_u3011&quot;&gt;&lt;a href=&quot;#u3010_u65B9_u6848_u521D_u63A2_u3011&quot; class=&quot;headerlink&quot; title=&quot;【方案初探】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【方案初探】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;对于上面的场景，最先想到的方案是，把每个母包处理任务分成优先和闲时两个celery任务队列分别处理，分别单独配给cpu资源（土豪的话给多一台机器也行）专门处理。大家估计也想到这种做法的弊端了，这样无法有效使用资源，当优先任务队列没有任务时，闲时任务队列却满载，显然这种设计方案不是很好。&lt;/p&gt;
&lt;p&gt;那么有没有更好的处理方案呢？试想如果任务可以按优先级别在队列中排队就好了。显然celery并没有提供优先队列这种机制，那么我们只能自己实现一个celery一样的异步事件队列，并且支持优先级的队列。这时候显然想到的是&lt;a href=&quot;http://doc.redisfans.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;redis&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010redis_u4F18_u5148_u961F_u5217_u3011&quot;&gt;&lt;a href=&quot;#u3010redis_u4F18_u5148_u961F_u5217_u3011&quot; class=&quot;headerlink&quot; title=&quot;【redis优先队列】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【redis优先队列】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;redis中提供了BLPOP，RPUSH（RLPOP，LPSUH）这些队列操作。&lt;/p&gt;
&lt;p&gt;来看看&lt;a href=&quot;http://doc.redisfans.com/list/blpop.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;BLOOP&lt;/a&gt;的介绍：&lt;br&gt;BLPOP key [key …] timeout&lt;br&gt;BLPOP 是列表的阻塞式(blocking)弹出原语。&lt;br&gt;它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP命令阻塞，直到等待超时，或有另一个客户端对给定 key 的任意一个执行 LPUSH 或 RPUSH 命令为止。&lt;br&gt;&lt;strong&gt;当给定多个 key 参数时，按参数 key的先后顺序依次检查各个列表，弹出第一个非空列表的头元素（这是就是实现优先级的关键）。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么我们可以设置两个key，一个表示优先任务的key，姑且叫priority_task，另一个闲时任务的key，就叫normal_task。在添加任务时，把对应任务所要必备参数添加的对应的key值队列即可。具体如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;priority_task = &amp;#123;  &lt;span class=&quot;comment&quot;&gt;# 优先任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;id_list&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;],  &lt;span class=&quot;comment&quot;&gt;# 对应要生成子包id列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;root_package_id&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10086&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 母包数据表索引id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redis.rpush(&lt;span class=&quot;string&quot;&gt;&#39;priority_task&#39;&lt;/span&gt;, json.dumps(priority_task))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;normal_task = &amp;#123;  &lt;span class=&quot;comment&quot;&gt;# 普通任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;id_list&#39;&lt;/span&gt;: [&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;],  &lt;span class=&quot;comment&quot;&gt;# 对应要生成子包id列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;root_package_id&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10086&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 母包数据表索引id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redis.rpush(&lt;span class=&quot;string&quot;&gt;&#39;normal_task&#39;&lt;/span&gt;, json.dumps(normal_task))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;成功入队后，接下来就是不断从队列中取出任务，然后对应处理，大概代码如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 监听任务,没有打包任务则阻塞&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    key, task = redis.blpop([&lt;span class=&quot;string&quot;&gt;&#39;priority_task&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;normal_task&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    deal_task(key, json.loads(task))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010_u4EFB_u52A1_u52A8_u6001_u5207_u6362_u3011&quot;&gt;&lt;a href=&quot;#u3010_u4EFB_u52A1_u52A8_u6001_u5207_u6362_u3011&quot; class=&quot;headerlink&quot; title=&quot;【任务动态切换】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【任务动态切换】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;上面实现保证了每次从队列取出的任务都是优先级别最高的，但是存在着问题，比如当前正在处理闲时任务，可是这个闲时任务可能要处理200+个包，这时候队列中又来了一个优先任务，那么这个优先任务必须等待之前的闲时任务处理完成才能开始处理，这显然不是我们想要的，那么我们能挂起当前正在处理的闲时任务，先去处理优先任务吗。显然是可以的，就是一个最简单的协程：函数调用。只需要在闲时任务处理完每个子包后，检查优先任务队列是否有元素，有则调用函数先处理优先任务，等优先任务完成后，再继续处理闲时任务。&lt;br&gt;处理函数大概如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deal_task&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(key, task)&lt;/span&gt;:&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;# 任务处理函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id_list = task[&lt;span class=&quot;string&quot;&gt;&#39;id_list&#39;&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;# 要生成的子包id&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; id &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; id_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        do something....   &lt;span class=&quot;comment&quot;&gt;# 生成对应的id子包&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; key == &lt;span class=&quot;string&quot;&gt;&#39;normal_key&#39;&lt;/span&gt;:  &lt;span class=&quot;comment&quot;&gt;# 如果当前是闲时任务&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; redis.llen(&lt;span class=&quot;string&quot;&gt;&#39;priority_key&#39;&lt;/span&gt;) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:  &lt;span class=&quot;comment&quot;&gt;# 检查是否有优先任务，有则获取并执行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                priority_task = redis.lpop(&lt;span class=&quot;string&quot;&gt;&#39;priority_key&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; priority_task:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    deal_task(&lt;span class=&quot;string&quot;&gt;&#39;priority_key&#39;&lt;/span&gt;, json.loads(priority_task))  &lt;span class=&quot;comment&quot;&gt;# 执行优先任务处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;以上就是实现一个单进程处理异步优先任务队列的全过程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u591A_u8FDB_u7A0B_u5316_u3011&quot;&gt;&lt;a href=&quot;#u3010_u591A_u8FDB_u7A0B_u5316_u3011&quot; class=&quot;headerlink&quot; title=&quot;【多进程化】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【多进程化】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;上面实现都是单进程处理的，为了提升处理效率，我们可以开多个进程提升并发量，这里建议使用&lt;a href=&quot;https://pypi.python.org/pypi/supervisor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;supervisor&lt;/a&gt;来管理你的这些进程。这里需要注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多进程处理临界资源，如果没有相关临界资源的竞争那最好，如果有，那么你必须考虑怎么处理，一般是用队列顺序化。&lt;/li&gt;
&lt;li&gt;supervisor持久化进程数据库链接，会导致数据库虽然已经断开连接，但是进程并不知晓，当进程再次执行数据库查询时就会出错，mysql一般会报一个gone away的错误。&lt;br&gt;&lt;strong&gt;注：还可以用进程池异步处理。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u6700_u540E_u3011&quot;&gt;&lt;a href=&quot;#u3010_u6700_u540E_u3011&quot; class=&quot;headerlink&quot; title=&quot;【最后】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【最后】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;以上是本人的处理方案，如果有更好的建议记得留下宝贵的意见(&amp;gt;▽&amp;lt;)。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u3010_u9700_u6C42_u80CC_u666F_u3011&quot;&gt;&lt;a href=&quot;#u3010_u9700_u6C42_u80CC_u666F_u3011&quot; class=&quot;headerlink&quot; title=&quot;【需求背景】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【需求背景】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;对于异步任务处理，相信很多人首选&lt;a href=&quot;http://docs.jinkan.org/docs/celery/getting-started/introduction.html&quot;&gt;celery&lt;/a&gt;，的确，celery处理异步任务非常强悍，使用简单，支持各种并发。但是，大家来看看我所遇到的一个应用场景：每次后台上传一个游戏母包，然后对这个母包处理（添加某种标识，比如id）生成多个游戏子包，其中有一些id号的包是要求尽快的处理的，剩下的可以闲时处理。这里就对要把一个母包分成两个任务来处理，其中一个是优先处理的，另一个是闲时处理。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="celery" scheme="http://xymlife.com/tags/celery/"/>
    
      <category term="redis" scheme="http://xymlife.com/tags/redis/"/>
    
      <category term="supervisor" scheme="http://xymlife.com/tags/supervisor/"/>
    
      <category term="优先队列" scheme="http://xymlife.com/tags/%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>meinheld为何比gevent高效？</title>
    <link href="http://xymlife.com/2016/01/18/meinheld%E4%B8%BA%E4%BD%95%E6%AF%94gevent%E9%AB%98%E6%95%88%EF%BC%9F/"/>
    <id>http://xymlife.com/2016/01/18/meinheld为何比gevent高效？/</id>
    <published>2016-01-17T16:54:28.000Z</published>
    <updated>2016-01-20T16:42:20.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;两者都是高性能的WSGI兼容的web服务器。既然是同种东西，必然有对比，网上有挺多benchmark，我也做过对应的benchmark，不过没有整理，这里推荐一下网上的一篇&lt;a href=&quot;http://www.360ito.com/article/26.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;benchmark&lt;/a&gt;，能够看出meinheld的性能确实好得令人意外。那么为什么meinheld会比gevent性能高这么多呢？我们从底层实现来看看，他究竟做了一些什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;u3010meinheld_u548Cgevent_u3011&quot;&gt;&lt;a href=&quot;#u3010meinheld_u548Cgevent_u3011&quot; class=&quot;headerlink&quot; title=&quot;【meinheld和gevent】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【meinheld和gevent】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;两者实现很相似。&lt;br&gt;meinheld：greenlet(协程) + picoev（高性能网络库）&lt;br&gt;gevent：greenlet（协程） + libevent（高性能网络库）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010greenlet_u3011&quot;&gt;&lt;a href=&quot;#u3010greenlet_u3011&quot; class=&quot;headerlink&quot; title=&quot;【greenlet】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【greenlet】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;python中的yield和第三方库greenlet，都是用来实现协程的利器。&lt;br&gt;greenlet 提供了在协程中直接切换控制权的方式，比生成器(yield)更加灵活、简洁。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;协程：又称微线程，纤程。&lt;/strong&gt;&lt;br&gt;协程的这种“挂起”和“唤醒”机制实质上是将一个过程切分成了若干个子过程，给了我们一种以扁平的方式来使用事件回调模型。优点：共享进程的上下文，一个进程可以创建百万，千万的coroutine。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010libevent_u3011&quot;&gt;&lt;a href=&quot;#u3010libevent_u3011&quot; class=&quot;headerlink&quot; title=&quot;【libevent】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【libevent】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;libevent是一个事件驱动的网络库，主要设计模式是&lt;a href=&quot;http://www.xymlife.com/2016/01/16/Reactor/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactor（反应器）&lt;/a&gt;。&lt;br&gt;程序通过Libevent框架注册相应的事件和回调函数；当这些事件发生时，Libevent会调用这些回调函数处理相应的事件（I/O读写、定时和信号）。整个过程都是异步高效的。想看具体源码实现的请移步&lt;a href=&quot;http://blog.csdn.net/sparkliang/article/details/5202394&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里&lt;/a&gt;。这里我们只看主要处理部分event_base_loop。&lt;/p&gt;
&lt;p&gt;简要说明event_base_loop实现。&lt;br&gt;&lt;strong&gt;事件：&lt;/strong&gt;首先loop中要处理的事件有3种，一种是计时事件（timeout触发），一种是普通&lt;a href=&quot;http://www.xymlife.com/2016/01/13/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;I/O&lt;/a&gt;事件（select, poll，epoll），还有一种信号事件（signal），其中信号事件最终也是被转换成普通I/O事件被监听。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;流程：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先通过Timer最小堆（以时间为排序的键）找出至少要等待的时间。（代码中的timeout_next()函数）。&lt;/li&gt;
&lt;li&gt;通过select发送这些事件fd到内核并设置时间为1中所求的等待时间。然后把select返回的就绪事件放到就绪列表。（对应 evsel-&amp;gt;dispatch(base, evbase, tv_p)）。&lt;/li&gt;
&lt;li&gt;然后把现在超时的计时事件放到就绪列表。（对应gettime(base, &amp;amp;base-&amp;gt;tv_cache)）。&lt;/li&gt;
&lt;li&gt;最后调用处理函数处理就绪列表中的事件（timeout_process(base)）。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;event_base_loop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; event_base *base, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; eventop *evsel = base-&amp;gt;evsel;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *evbase = base-&amp;gt;evbase;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval tv;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; timeval *tv_p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; res, done;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 清空时间缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base-&amp;gt;tv_cache.tv_sec = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// evsignal_base是全局变量，在处理signal时，用于指名signal所属的event_base实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (base-&amp;gt;sig.ev_signal_added)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        evsignal_base = base;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    done = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!done) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 事件主循环&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 查看是否需要跳出循环，程序可以调用event_loopexit_cb()设置event_gotterm标记&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 调用event_base_loopbreak()设置event_break标记&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (base-&amp;gt;event_gotterm) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            base-&amp;gt;event_gotterm = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (base-&amp;gt;event_break) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            base-&amp;gt;event_break = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 校正系统时间，如果系统使用的是非MONOTONIC时间，用户可能会向后调整了系统时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 在timeout_correct函数里，比较last wait time和当前时间，如果当前时间&amp;lt; last wait time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 表明时间有问题，这是需要更新timer_heap中所有定时事件的超时时间。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeout_correct(base, &amp;amp;tv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 根据timer heap中事件的最小超时时间，计算系统I/O demultiplexer的最大等待时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tv_p = &amp;amp;tv;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!base-&amp;gt;event_count_active &amp;amp;&amp;amp; !(flags &amp;amp; EVLOOP_NONBLOCK)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            timeout_next(base, &amp;amp;tv_p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 依然有未处理的就绪时间，就让I/O demultiplexer立即返回，不必等待&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// 下面会提到，在libevent中，低优先级的就绪事件可能不能立即被处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            evutil_timerclear(&amp;amp;tv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 如果当前没有注册事件，就退出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!event_haveevents(base)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            event_debug((&lt;span class=&quot;string&quot;&gt;&quot;%s: no events registered.&quot;&lt;/span&gt;, __func__));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 更新last wait time，并清空time cache&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gettime(base, &amp;amp;base-&amp;gt;event_tv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        base-&amp;gt;tv_cache.tv_sec = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 调用系统I/O demultiplexer等待就绪I/O events，可能是epoll_wait，或者select等；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 在evsel-&amp;gt;dispatch()中，会把就绪signal event、I/O event插入到激活链表中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        res = evsel-&amp;gt;dispatch(base, evbase, tv_p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (res == -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 将time cache赋值为当前系统时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        gettime(base, &amp;amp;base-&amp;gt;tv_cache);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 检查heap中的timer events，将就绪的timer event从heap上删除，并插入到激活链表中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        timeout_process(base);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 调用event_process_active()处理激活链表中的就绪event，调用其回调函数执行事件处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 该函数会寻找最高优先级（priority值越小优先级越高）的激活事件链表，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 然后处理链表中的所有就绪事件；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// 因此低优先级的就绪事件可能得不到及时处理；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (base-&amp;gt;event_count_active) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            event_process_active(base);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!base-&amp;gt;event_count_active &amp;amp;&amp;amp; (flags &amp;amp; EVLOOP_ONCE))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                done = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (flags &amp;amp; EVLOOP_NONBLOCK)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            done = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 循环结束，清空时间缓存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    base-&amp;gt;tv_cache.tv_sec = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    event_debug((&lt;span class=&quot;string&quot;&gt;&quot;%s: asked to terminate loop.&quot;&lt;/span&gt;, __func__));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010picoev_u3011&quot;&gt;&lt;a href=&quot;#u3010picoev_u3011&quot; class=&quot;headerlink&quot; title=&quot;【picoev】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【picoev】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/kazuho/picoev&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;picoev&lt;/a&gt;在项目下有把picoev和libevent这些库做对比，作者也提了一下为什么picoev的速度会这么快。主要有两个原因。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;picoev几乎所有顺序结构都是用数组实现的，索引访问速度比libevent的链表快很多。&lt;/li&gt;
&lt;li&gt;picoev采用了环形队列+vector+bitmap来实现定时事件的检测。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面看看picoev的picoev_loop_once。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;picoev_loop_once&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(picoev_loop* loop, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; max_wait)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  loop-&amp;gt;now = time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//获取当前时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 最大等待事件不超过计时器的处理时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (max_wait &amp;gt; loop-&amp;gt;timeout.resolution) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    max_wait = loop-&amp;gt;timeout.resolution;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 使用select去检测事件是否完成，如果完成就调对应的回调函数处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (picoev_poll_once_internal(loop, max_wait) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (max_wait != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;  &lt;span class=&quot;comment&quot;&gt;//有指定时间则刷新当前时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    loop-&amp;gt;now = time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 处理到时间的计时事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  picoev_handle_timeout_internal(loop);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;这里主要讲一下loop的结构，因为这是高效的原因。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/75E1F650-43F0-469C-AD75-EB93A028CDD0.png&quot; alt=&quot;loop结构图&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于timeout环形队列，每经过resolution时间就往后移动一块，当前队头永远指向刚刚到达时间的事件块，如图当前处理的是2，那么说明队列头在2，那么再经过resolution时间就会到3，根据时间不断后移，循环利用。&lt;/li&gt;
&lt;li&gt;在处理每一块timeout里面注册的事件时，遍历所有不为0的vector，得出对应的fd。图中已经写的很清楚的，其实原理和16进制一样简单。插入一个事件的时间复杂度为O(1),遍历所有在timeout块的注册事件时间复杂度等价为O(n)[注：这里n为timeout里面注册事件的个数]，对比libevent的最小堆O(logn)插入，每次处理一个后调整堆的复杂度O(logn)处理n个就为O(nlogn)，确实是高效很多。&lt;/li&gt;
&lt;li&gt;还有一个高效的地方在于，picoev是检测到有一个事件就马上处理（无阻塞），不像libevent挂起等待最小等待时间到达（阻塞），然后才对所有就绪事件队列里面的事件进行处理，不过这也导致了picoev不能设定事件处理的优先级。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点（对比libevent）：作者在最后说picoev并没有libevent成熟，也没有很多功能，现在只支持select，epoll，kqueue，我们也可以看到没有信号事件的处理，优先级设定这些功能的支持。不过他简单快速，而且支持多线程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u6700_u540E_u3011&quot;&gt;&lt;a href=&quot;#u3010_u6700_u540E_u3011&quot; class=&quot;headerlink&quot; title=&quot;【最后】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【最后】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;使用python做web开发的同学，可以尝试一下nginx + meinheld + gunicorn + flask。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;两者都是高性能的WSGI兼容的web服务器。既然是同种东西，必然有对比，网上有挺多benchmark，我也做过对应的benchmark，不过没有整理，这里推荐一下网上的一篇&lt;a href=&quot;http://www.360ito.com/article/26.html&quot;&gt;benchmark&lt;/a&gt;，能够看出meinheld的性能确实好得令人意外。那么为什么meinheld会比gevent性能高这么多呢？我们从底层实现来看看，他究竟做了一些什么。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="I/O多路复用" scheme="http://xymlife.com/tags/I-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
      <category term="gevent" scheme="http://xymlife.com/tags/gevent/"/>
    
      <category term="libevent" scheme="http://xymlife.com/tags/libevent/"/>
    
      <category term="meinheld" scheme="http://xymlife.com/tags/meinheld/"/>
    
      <category term="picoev" scheme="http://xymlife.com/tags/picoev/"/>
    
  </entry>
  
  <entry>
    <title>后缀数组小结</title>
    <link href="http://xymlife.com/2016/01/16/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84%E5%B0%8F%E7%BB%93/"/>
    <id>http://xymlife.com/2016/01/16/后缀数组小结/</id>
    <published>2016-01-16T03:20:45.000Z</published>
    <updated>2016-01-23T17:09:10.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这篇文章看的人还是挺多的，为了提升大家的阅读快感，特地写了这markdown版。希望大家会喜欢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;后缀数组号称字符串处理神器，不过发现好多人都只会用模板，其实这不是我们学算法的本质，我们学习算法的本质应该理解其实现原理，并加以实现，特别是算法，更讲究的是一种思想。一年前的我也是只会用别人的模板，最近却静下心来，研究了一下后缀数组，自己写了一份自己的模板。&lt;br&gt;我基本上是跟着连教的ppt来学习的，当然也少不了百度，先讲一下基本概念。(这里大量引用了连教的ppt)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;u3010_u57FA_u672C_u5B9A_u4E49_u3011&quot;&gt;&lt;a href=&quot;#u3010_u57FA_u672C_u5B9A_u4E49_u3011&quot; class=&quot;headerlink&quot; title=&quot;【基本定义】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【基本定义】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1. 子串（注：串!=字符串）：&lt;/strong&gt;字符串 S 的子串r[i..j] ，i ≤ j，表示r 串中从 i 到 j 这一段，就是顺次排列r[i]，r[i+1]，…，r[j] 形成的子串。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. 后缀：&lt;/strong&gt;后缀是指从某个位置 i 开始到整个串末尾结束的一个特殊子串。字符串r 的从 第 i 个字 符 开 始 的 后 缀 表 示 为 Suffix(i) ，也 就 是Suffix(i)=r[i..len(r)] 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. 后缀数组（SA[i]存放排名第i大的子串首字符下标）：&lt;/strong&gt; 后缀数组 SA 是一个一维数组，它保存1..n 的某个排列 SA[1]，SA[2]， ……，SA[n]，并且保证Suffix(SA[i]) &amp;lt; Suffix(SA[i+1])，1 ≤ i &amp;lt; n。也就是将 S 的 n 个后缀从小到大进行排序之后把排好序的后缀的开头位置顺次放入SA 中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. 名次数组（rank[i]存放suffix(i)的优先级）：&lt;/strong&gt;名次数组 Rank[i] 保存的是 Suffix(i) 在所有后缀中从小到大排列的 “ 名次 ” 。&lt;br&gt;&lt;strong&gt;注：这个是排序的关键字~（这句话是我们排序的重点）&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u7B97_u6CD5_u76EE_u6807_u3011&quot;&gt;&lt;a href=&quot;#u3010_u7B97_u6CD5_u76EE_u6807_u3011&quot; class=&quot;headerlink&quot; title=&quot;【算法目标】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【算法目标】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;目标是求得串的sa数组和rank数组：&lt;/strong&gt;易知sa和rank互为逆操作，即sa[rank[i]] = i；Rank[sa[i]] = i;（所以我们只要求得其一，就能O(n）算出另一个）&lt;br&gt;&lt;strong&gt;注：这个结论只在最后完成排序的时候符合。但sa和rank的定义一直都是适用的。原因是最后的时候不会存在相同（rank相等）的两个子串。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u7B97_u6CD5_u57FA_u672C_u6D41_u7A0B_u3011&quot;&gt;&lt;a href=&quot;#u3010_u7B97_u6CD5_u57FA_u672C_u6D41_u7A0B_u3011&quot; class=&quot;headerlink&quot; title=&quot;【算法基本流程】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【算法基本流程】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;1.设排序的的当前长度是h。Suffix(i,h) 表示suffix(i)前h个字符(大于length会截断)。&lt;br&gt;2.先按H=1，对suffix(i,H)(0 &amp;lt; i &amp;lt; s.length)排序。&lt;br&gt;3.倍增长度H，利用之前排序H/2长度后得到的rank数组作为关键字，把后H/2部分作为第二关键字，把前H/2部分作为第一关键字，对H长度的子串作排序。&lt;br&gt;4.由于是倍增长度，所以最多作logn次排序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注：那么复杂要做到nlogn，显然排序要o(n)，O(n)一般都选计数排序。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u8BA1_u6570_u6392_u5E8F_u3011&quot;&gt;&lt;a href=&quot;#u3010_u8BA1_u6570_u6392_u5E8F_u3011&quot; class=&quot;headerlink&quot; title=&quot;【计数排序】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【计数排序】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;不会的自己看看这个&lt;a href=&quot;http://baike.baidu.com/view/1209480.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;百度百科&lt;/a&gt;，是代码的主要部分。&lt;br&gt;这里选计数排序还有一个重要的原因，它是一个稳定排序，这就保证了数组的下标识第二关键字，我们前面说了，对于倍增长度H，利用之前排序H/2长度后得到的rank数组作为关键字,把后H/2部分作为第二关键字，嗯，就是这里，所以我们要先排后H/2的序，然后得到新的数组序列，下标就是第二关键字了，数组里面就是前H/2 rank的值，这是第一关键字，那么直接排序就相当于先对前H/2排序，如果这里相等，那么就会按下标排序，既第二关键字排序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u52A8_u624B_u73AF_u8282_u3011&quot;&gt;&lt;a href=&quot;#u3010_u52A8_u624B_u73AF_u8282_u3011&quot; class=&quot;headerlink&quot; title=&quot;【动手环节】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【动手环节】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;以下内容请按代码手动模拟一个串abab的构造过程，求sa数组。这能让你真正清楚后缀数组实现的精妙所在。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;按H=1进行计数排序&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// cnt是计数排序的辅助数组，k是第一关键字，id是第二关键字下标数组，r是以下标为第二关键字的新构数组，w存放的是字符串信息。sa保存的是排第i的是谁，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;// #define rep(i,n) for(int i = 0;i &amp;lt; n; i++) ，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *k = rk,*id = height,*r = res, *cnt = wa;&lt;span class=&quot;comment&quot;&gt;//计数排序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep(i,up) cnt[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep(i,len) cnt[k[i] = w[i]]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep(i,up) cnt[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] += cnt[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sa[--cnt[k[i]]] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;求第二关键字（想想为什么构造w数组的时候末尾要加个0）&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//cnt是计数排序的辅助数组，k是第一关键字，id是第二关键字下标数组，r是以下标为第二关键字的新构数组，w存放的是字符串信息，sa保存的是排第i的是谁。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = len - d; i &amp;lt; len; i++) id[p++] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep(i,len) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sa[i] &amp;gt;= d) id[p++] = sa[i] - d;  &lt;span class=&quot;comment&quot;&gt;//id保存了按后h/2排序的的序列，即排第i的后h/2的是原数组中的那个&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep(i,len) r[i] = k[id[i]];  &lt;span class=&quot;comment&quot;&gt;//构造新的排序数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对新数组排序&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//cnt是计数排序的辅助数组，k是第一关键字，id是第二关键字下标数组,r是以下标为第二关键字的新构数组，w存放的是字符串信息，sa保存的是排第i的是谁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep(i,up) cnt[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep(i,len) cnt[r[i]]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep(i,up) cnt[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] += cnt[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sa[--cnt[r[i]]] = id[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;得到新的关键字(即按H长度排序后的离散序列)&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;//cnt是计数排序的辅助数组，k是第一关键字，id是第二关键字下标数组,r是以下标为第二关键字的新构数组，w存放的是字符串信息，sa保存的是排第i的是谁&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;swap(k,r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;p = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;k[sa[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]] = p++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rep(i,len-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sa[i]+d &amp;lt; len &amp;amp;&amp;amp; sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+d &amp;lt;len &amp;amp;&amp;amp;r[sa[i]] == r[sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]]&amp;amp;&amp;amp; r[sa[i]+d] == r[sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+d])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	k[sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] = p - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; k[sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] = p++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;重复以上最后可以得到sa数组&lt;br&gt;Sa和rank有什么用？&lt;br&gt;求&lt;strong&gt;height数组！！&lt;/strong&gt;&lt;br&gt;height[i] 表示sa[i]和sa[i-1]的最长前缀，height的构造看代码手推一定能弄懂，自己找题目试试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u540E_u7F00_u6570_u7EC4_u6A21_u677F_u3011&quot;&gt;&lt;a href=&quot;#u3010_u540E_u7F00_u6570_u7EC4_u6A21_u677F_u3011&quot; class=&quot;headerlink&quot; title=&quot;【后缀数组模板】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【后缀数组模板】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;模板为了短小精悍，所以尽量压缩了代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;preprocessor&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; rep(i,n) for(int i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i &amp;lt; n; i++)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;std&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size  = &lt;span class=&quot;number&quot;&gt;200005&lt;/span&gt;,INF = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;lt;&amp;lt;&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rk[size],sa[size],height[size],w[size],wa[size],res[size];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSa&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len,&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; up)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; *k = rk,*id = height,*r = res, *cnt = wa;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rep(i,up) cnt[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rep(i,len) cnt[k[i] = w[i]]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rep(i,up) cnt[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] += cnt[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		sa[--cnt[k[i]]] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; d = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,p = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(p &amp;lt; len)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = len - d; i &amp;lt; len; i++) id[p++] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rep(i,len)	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sa[i] &amp;gt;= d) id[p++] = sa[i] - d;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rep(i,len) r[i] = k[id[i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rep(i,up) cnt[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rep(i,len) cnt[r[i]]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rep(i,up) cnt[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] += cnt[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			sa[--cnt[r[i]]] = id[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		swap(k,r);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		k[sa[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]] = p++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		rep(i,len-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sa[i]+d &amp;lt; len &amp;amp;&amp;amp; sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+d &amp;lt;len &amp;amp;&amp;amp;r[sa[i]] == r[sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]]&amp;amp;&amp;amp; r[sa[i]+d] == r[sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]+d])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				k[sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] = p - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; k[sa[i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]] = p++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(p &amp;gt;= len) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		d *= &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,up = p, p = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	rep(i,len) rk[sa[i]] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	height[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] =  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,p = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = sa[rk[i]-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(i+p &amp;lt; len&amp;amp;&amp;amp; j+p &amp;lt; len&amp;amp;&amp;amp; w[i+p] == w[j+p]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			p++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		height[rk[i]] = p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		p = max(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,p - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getSuffix&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; s[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(s),up = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		w[i] = s[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		up = max(up,w[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	w[len++] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getSa(len,up+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	getHeight(len);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010_u7EC3_u624B_u3011&quot;&gt;&lt;a href=&quot;#u3010_u7EC3_u624B_u3011&quot; class=&quot;headerlink&quot; title=&quot;【练手】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【练手】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;最后给出几题练习题。&lt;br&gt;•Poj 2774 –最长公共连续子串（入门题目）&lt;br&gt;•Poj1743—最长不重叠重复子串（二分的判定要小心点，这题有点特别。）&lt;br&gt;•Poj3294—出现次数超过一半的最长子串（判断组中不同串出现次数的技巧很关键）&lt;br&gt;•Poj3261—重复k次可重叠子串。（会了上面两题，这题应该很简单，可以试试用单调栈。）&lt;br&gt;•Poj2758—后缀数组+rmq（这题难度不在rmq，而在于写代码的能力和查询的算法实现。）&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这篇文章看的人还是挺多的，为了提升大家的阅读快感，特地写了这markdown版。希望大家会喜欢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u524D_u8A00_u3011&quot;&gt;&lt;a href=&quot;#u3010_u524D_u8A00_u3011&quot; class=&quot;headerlink&quot; title=&quot;【前言】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【前言】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;后缀数组号称字符串处理神器，不过发现好多人都只会用模板，其实这不是我们学算法的本质，我们学习算法的本质应该理解其实现原理，并加以实现，特别是算法，更讲究的是一种思想。一年前的我也是只会用别人的模板，最近却静下心来，研究了一下后缀数组，自己写了一份自己的模板。&lt;br&gt;我基本上是跟着连教的ppt来学习的，当然也少不了百度，先讲一下基本概念。(这里大量引用了连教的ppt)&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="后缀数组" scheme="http://xymlife.com/tags/%E5%90%8E%E7%BC%80%E6%95%B0%E7%BB%84/"/>
    
      <category term="字符串处理" scheme="http://xymlife.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    
      <category term="排序" scheme="http://xymlife.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="算法" scheme="http://xymlife.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Reactor</title>
    <link href="http://xymlife.com/2016/01/16/Reactor/"/>
    <id>http://xymlife.com/2016/01/16/Reactor/</id>
    <published>2016-01-15T17:39:34.000Z</published>
    <updated>2016-01-20T16:42:30.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;u3010Reactor_u3011&quot;&gt;&lt;a href=&quot;#u3010Reactor_u3011&quot; class=&quot;headerlink&quot; title=&quot;【Reactor】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【Reactor】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Reactor设计模式在高性能I/O框架中随处可见，例如redis，tornado，gevent，libevent等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reactor可以翻译为反应器，是一种基于事件驱动的设计模式。&lt;/strong&gt;那么它是如何运作的呢？其实很多设计模式都来源于生活中的一些常见的处理事情的方式。&lt;/p&gt;
&lt;p&gt;我们先来看一个例子：你和妹子去购物中心吃饭，发现很多人在排队，这时只需要让前台在电脑上填上你需要的双人位，和你的手机号码，待会有位置的时候会发短信给你，这时候你可以陪妹子到处逛逛，买买买。当餐厅有双人位空出的时候，就会发短信或打电话给你，这时你就可以带妹子去吃饭了。&lt;/p&gt;
&lt;p&gt;上面例子中，你没有呆呆的排队等餐厅有位，你还陪妹子去逛街买了很多东西，整个过程都是不阻塞的，效率非常之高。这里面餐厅充当了Reactor的作用，他帮你一直盯着，等有位置空出的时候，就做出相应的反应：根据你所填的手机号码，通知你可以就餐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：在Reactor模式中，处理事件的程序不会去调用反应器，而是告诉Reactor监听一个事件，和这个事件发生时处理方法，当Reactor监测到这个事件发生时，就启动对应的处理方法（一般是回调函数）进行处理，这种控制逆转又称为“好莱坞法则”（不要调用我，让我来调用你）。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;u3010Reactor_u8BBE_u8BA1_u6A21_u5F0F_u3011&quot;&gt;&lt;a href=&quot;#u3010Reactor_u8BBE_u8BA1_u6A21_u5F0F_u3011&quot; class=&quot;headerlink&quot; title=&quot;【Reactor设计模式】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【Reactor设计模式】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在Reactor模式中，有5个关键的参与者。&lt;a href=&quot;http://www.cnblogs.com/hzbook/archive/2012/07/19/2599698.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;[引用]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1. 描述符（handle）：&lt;/strong&gt;由操作系统提供，用于识别每一个事件，如Socket描述符、文件描述符(fd)等。在Linux中，它用一个整数来表示。事件可以来自外部，如来自客户端的连接请求、数据等。事件也可以来自内部，如定时器事件。&lt;br&gt;&lt;strong&gt;2. 同步事件分离器（demultiplexer）：&lt;/strong&gt;是一个函数，用来等待一个或多个事件的发生。调用者会被阻塞，直到分离器分离的描述符集上有事件发生。Linux的select函数是一个经常被使用的分离器。&lt;br&gt;&lt;strong&gt;3. 事件处理器接口（event handler）：&lt;/strong&gt;是由一个或多个模板函数组成的接口。这些模板函数描述了和应用程序相关的对某个事件的操作。&lt;br&gt;&lt;strong&gt;4. 具体的事件处理器（concrete event handler）：&lt;/strong&gt;是事件处理器接口的实现。它实现了应用程序提供的某个服务。每个具体的事件处理器总和一个描述符相关。它使用描述符来识别事件、识别应用程序提供的服务。&lt;br&gt;&lt;strong&gt;5. Reactor 管理器（reactor）：&lt;/strong&gt;定义了一些接口，用于应用程序控制事件调度，以及应用程序注册、删除事件处理器和相关的描述符。它是事件处理器的调度核心。 Reactor管理器使用同步事件分离器来等待事件的发生。一旦事件发生，Reactor管理器先是分离每个事件，然后调度事件处理器，最后调用相关的模 板函数来处理这个事件。&lt;/p&gt;
&lt;p&gt;下面是Reactor结构图&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/1342687408_4917.jpg&quot; alt=&quot;此处输入图片的描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;可能从上面来看比较难理解，那么我们从最开始的例子来分析这几个角色的作用。&lt;br&gt;你告诉前台MM &lt;strong&gt;（Reactor：负责后面的所有操作的调度）&lt;/strong&gt;你需要一个双人位&lt;strong&gt;（handle：就是一个等待双人位的事件）&lt;/strong&gt;，并告知手机号码&lt;strong&gt;（concrete event handler：当有双人位时，通过这个手机联系你，是具体的事件的处理方法）&lt;/strong&gt;，而她会往她的电脑中添加一条记录&lt;strong&gt;（event handler：记录着双人位和你的联系方式，将事件和处理方式绑定到一起）&lt;/strong&gt;，当某一桌双人位结账时，电脑从一堆排号信息中自动检测到有空余双人位&lt;strong&gt;（demultiplexer：将空余双人位事件从其他还在等待发生的事件中分离出来）&lt;/strong&gt;，前台MM根据电脑记录找到你的电话号码，然后通过电话通知你可以前来就餐。&lt;br&gt;希望到这里你已经把Reactor的各个角色的作用弄清楚了，下次就可以去读一些使用Reactor设计模式的源码了，这里推荐 &lt;a href=&quot;http://blog.csdn.net/sparkliang/article/details/5202394&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;libevent&lt;/a&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010Reactor_u7684_u7279_u70B9_u3011&quot;&gt;&lt;a href=&quot;#u3010Reactor_u7684_u7279_u70B9_u3011&quot; class=&quot;headerlink&quot; title=&quot;【Reactor的特点】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【Reactor的特点】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;最后总结一下Reactor的优点：&lt;br&gt;&lt;strong&gt;1. 响应快：&lt;/strong&gt;不必为单个同步时间所阻塞，虽然Reactor本身依然是同步的。&lt;br&gt;&lt;strong&gt;2. 编程相对简单：&lt;/strong&gt; 可以最大程度的避免复杂的多线程及同步问题，并且避免了多线程/进程的切换开销。&lt;br&gt;&lt;strong&gt;3. 可扩展性：&lt;/strong&gt; 可以方便的通过增加Reactor实例个数来充分利用CPU资源。&lt;br&gt;&lt;strong&gt;4. 可复用性：&lt;/strong&gt; reactor框架本身与具体事件处理逻辑无关，具有很高的复用性。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u3010Reactor_u3011&quot;&gt;&lt;a href=&quot;#u3010Reactor_u3011&quot; class=&quot;headerlink&quot; title=&quot;【Reactor】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【Reactor】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Reactor设计模式在高性能I/O框架中随处可见，例如redis，tornado，gevent，libevent等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reactor可以翻译为反应器，是一种基于事件驱动的设计模式。&lt;/strong&gt;那么它是如何运作的呢？其实很多设计模式都来源于生活中的一些常见的处理事情的方式。&lt;/p&gt;
&lt;p&gt;我们先来看一个例子：你和妹子去购物中心吃饭，发现很多人在排队，这时只需要让前台在电脑上填上你需要的双人位，和你的手机号码，待会有位置的时候会发短信给你，这时候你可以陪妹子到处逛逛，买买买。当餐厅有双人位空出的时候，就会发短信或打电话给你，这时你就可以带妹子去吃饭了。&lt;/p&gt;
&lt;p&gt;上面例子中，你没有呆呆的排队等餐厅有位，你还陪妹子去逛街买了很多东西，整个过程都是不阻塞的，效率非常之高。这里面餐厅充当了Reactor的作用，他帮你一直盯着，等有位置空出的时候，就做出相应的反应：根据你所填的手机号码，通知你可以就餐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：在Reactor模式中，处理事件的程序不会去调用反应器，而是告诉Reactor监听一个事件，和这个事件发生时处理方法，当Reactor监测到这个事件发生时，就启动对应的处理方法（一般是回调函数）进行处理，这种控制逆转又称为“好莱坞法则”（不要调用我，让我来调用你）。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="I/O多路复用" scheme="http://xymlife.com/tags/I-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
      <category term="libevent" scheme="http://xymlife.com/tags/libevent/"/>
    
      <category term="reactor" scheme="http://xymlife.com/tags/reactor/"/>
    
      <category term="redis" scheme="http://xymlife.com/tags/redis/"/>
    
      <category term="事件驱动" scheme="http://xymlife.com/tags/%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8/"/>
    
  </entry>
  
  <entry>
    <title>I/O多路复用</title>
    <link href="http://xymlife.com/2016/01/13/IO%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    <id>http://xymlife.com/2016/01/13/IO多路复用/</id>
    <published>2016-01-13T11:46:12.000Z</published>
    <updated>2016-01-20T16:42:04.000Z</updated>
    
    <content type="html">&lt;h4 id=&quot;u3010I/O_u591A_u8DEF_u590D_u7528_u6280_u672F_u3011&quot;&gt;&lt;a href=&quot;#u3010I/O_u591A_u8DEF_u590D_u7528_u6280_u672F_u3011&quot; class=&quot;headerlink&quot; title=&quot;【I/O多路复用技术】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【I/O多路复用技术】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;系统内核缓冲I/O数据，当某个I/O准备好后，系统通知应用程序该I/O可读或可写，这样应用程序可以马上完成相应的I/O操作，而不需要等待系统完成相应I/O操作，从而应用程序不必因等待I/O操作而阻塞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;u3010select_u3011&quot;&gt;&lt;a href=&quot;#u3010select_u3011&quot; class=&quot;headerlink&quot; title=&quot;【select】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【select】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;网上很多讲解select函数的，这里围绕下图讲解一下select函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数构造：&lt;/strong&gt;&lt;br&gt;int select(int maxfd, fd_set readset, fd_set writeset, fd_set exceptset, timeval tv);&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;fd: （file descriptor）文件描述符，是内核用来描述一个文件的索引值（非负整型）。&lt;/li&gt;
&lt;li&gt;fdset: 是一个关于fd的一个bitmap,上面有3个fdset变量，readset：可读集合，writeset：可写集合，exceptset：异常集合。分别对应文件的可读，可写，和异常。&lt;/li&gt;
&lt;li&gt;maxfd: 就是最大的fd的值+1。估计代码里面是&amp;lt;而非&amp;lt;=，所以必须+1。&lt;/li&gt;
&lt;li&gt;timevl: 是一个结构体，其中包含两个属性，tv_sec：秒，tv_usec：微妙，表示select超时时间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;如图所示：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序先调用了select函数对fd=1和fd=2的文件进行了可读监听，超时时间为5s。&lt;/li&gt;
&lt;li&gt;在接下来的5s内，被监听的两个文件没有全部就绪，直到超时时间到返回一个数值，表示有多少个就绪，这里只有一个所以return的是1，然后重新看readset，发现只有fd=1的位置是1，说明只有fd=1的文件就绪。&lt;/li&gt;
&lt;li&gt;接着可以去读取你要读取的文件（fd=1）了。&lt;br&gt;&lt;img src=&quot;http://7xq2as.com1.z0.glb.clouddn.com/F5044F9E-F8BA-4D9F-A9BF-EBBE0ECDE09C.png&quot; alt=&quot;select流程图&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每次调用select，都需要把fd集合从用户态拷贝到内核态，这个开销在fd很多时会很大。&lt;/li&gt;
&lt;li&gt;同时每次调用select都需要在内核遍历传递进来的所有fd，这个开销在fd很多时也很大。&lt;/li&gt;
&lt;li&gt;select支持的文件描述符数量太小了，默认是1024。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010poll_u3011&quot;&gt;&lt;a href=&quot;#u3010poll_u3011&quot; class=&quot;headerlink&quot; title=&quot;【poll】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【poll】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;poll的实现和select非常相似，只是描述fd集合的方式不同，poll使用pollfd数组而不是select的fd_set结构，所以poll克服了select文件描述符数量的限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010epoll_u3011&quot;&gt;&lt;a href=&quot;#u3010epoll_u3011&quot; class=&quot;headerlink&quot; title=&quot;【epoll】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【epoll】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;epoll是一种reactor模式，提供了三个函数，epoll_create,epoll_ctl和epoll_wait。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;epoll_create是创建一个epoll句柄。&lt;/li&gt;
&lt;li&gt;epoll_ctl是注册要监听的事件类型。&lt;/li&gt;
&lt;li&gt;epoll_wait则是等待事件的产生。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;优化select缺点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于第一个缺点，epoll的解决方案在epoll_ctl函数中。每次注册新的事件到epoll句柄中时（在epoll_ctl中指定EPOLL_CTL_ADD），会把所有的fd拷贝进内核，而不是在epoll_wait的时候重复拷贝。epoll保证了每个fd在整个过程中只会拷贝一次。&lt;/li&gt;
&lt;li&gt;对于第二个缺点，epoll的解决方案不像select或poll一样每次都把fdset里面的fd轮流加入fd对应的设备等待队列中，而只在epoll_ctl时把要监控的fd挂一遍，并为每个fd指定一个回调函数，当设备就绪，唤醒等待队列上的等待者时，就会调用这个回调函数，而这个回调函数会把就绪的fd加入一个就绪链表）。epoll_wait的工作实际上就是在这个就绪链表中查看有没有就绪的fd（利用schedule_timeout()实现睡一会，判断一会的效果）。&lt;/li&gt;
&lt;li&gt;对于第三个缺点，epoll没有这个限制，它所支持的FD上限是最大可以打开文件的数目，这个和系统限制有关，linux里面可以用ulimit查看文件打开数限制。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;u3010I/O_u591A_u8DEF_u590D_u7528_u6280_u672F_u3011&quot;&gt;&lt;a href=&quot;#u3010I/O_u591A_u8DEF_u590D_u7528_u6280_u672F_u3011&quot; class=&quot;headerlink&quot; title=&quot;【I/O多路复用技术】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【I/O多路复用技术】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;系统内核缓冲I/O数据，当某个I/O准备好后，系统通知应用程序该I/O可读或可写，这样应用程序可以马上完成相应的I/O操作，而不需要等待系统完成相应I/O操作，从而应用程序不必因等待I/O操作而阻塞。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="I/O多路复用" scheme="http://xymlife.com/tags/I-O%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/"/>
    
      <category term="操作系统" scheme="http://xymlife.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Linux 启动过程</title>
    <link href="http://xymlife.com/2016/01/09/Linux%20%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/"/>
    <id>http://xymlife.com/2016/01/09/Linux 启动过程/</id>
    <published>2016-01-09T12:10:21.000Z</published>
    <updated>2016-01-20T16:42:11.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;安装了Arch，顺便梳理一下linux启动流程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010BIOS_28MBR_29_u3011&quot;&gt;&lt;a href=&quot;#u3010BIOS_28MBR_29_u3011&quot; class=&quot;headerlink&quot; title=&quot;【BIOS(MBR)】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【BIOS(MBR)】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;开机自检，通过通过BIOS加载CMOS，获取各种硬件信息。&lt;/li&gt;
&lt;li&gt;按照BIOS 的boot sequeuece顺序读取每一个存储设备的最前面512个字节,如果发现最后两个字节是0x55, oxAA,那么就找到了主引导扇区MBR。&lt;/li&gt;
&lt;li&gt;MBR结构如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;HDD 上的位置&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;代码用意&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;001-440 bytes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;由 BIOS 启动的 MBR 启动代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;441-446 bytes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;MBR 硬盘签名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;447-510 bytes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;分区表 (主分区和扩展分区，而非逻辑分区)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;511-512 bytes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;MBR 启动签名 0xAA55&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&quot;u3010GRUB_u3011&quot;&gt;&lt;a href=&quot;#u3010GRUB_u3011&quot; class=&quot;headerlink&quot; title=&quot;【GRUB】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【GRUB】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;通过引导器（GNU/Linux 引导器包括 GRUB 和 Syslinux）读取分区表。&lt;/li&gt;
&lt;li&gt;“传统” Windows/DOS MBR：引导器代码会在整个分区表里搜寻一个也是唯一的一个”活动”分区，读取该分区的X扇区，并把控制权交给操作系统。Windows/DOS 引导器不能启动 Arch Linux 分区因为它不是设计来加载 Linux 内核的，而且它只适应活动分区，主分区 (GRUB 会完全无视). 这也是为什么先装linux，再装windows会无法找到linux启动项。&lt;/li&gt;
&lt;li&gt;grub：linux下一般使用grub启动root loader，让用户选择启动哪个操作系统, grub可以从任何分区启动，无论它是主分区还是逻辑分区。&lt;/li&gt;
&lt;li&gt;分区表：每个分区表的长度只有64个字节，里面又分成四项，每项16个字节（第1个字节：如果为0x80，就表示该主分区是”活动”分区）所以，一个硬盘最多只能分四个一级分区，又叫做”主分区”。 随着硬盘越来越大，四个主分区已经不够了，需要更多的分区。但是，分区表只有四项，因此规定有且仅有一个区可以被定义成”扩展分区”（Extended partition）也就逻辑分区。 逻辑分区，以链式存放，可以无限拓展。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u8F7D_u5165_u5185_u6838_u3011&quot;&gt;&lt;a href=&quot;#u3010_u8F7D_u5165_u5185_u6838_u3011&quot; class=&quot;headerlink&quot; title=&quot;【载入内核】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【载入内核】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;操作系统接管硬件以后，首先将系统内核载入RAM，执行内核代码设置自己的虚拟内存子系统和根文件系统,对硬件进行检测并进行设备驱动程序初始化。&lt;/li&gt;
&lt;li&gt;驱动程序初始化后,会挂载一个只读的根文件系统（rootfs）,执行/sbin/init, 释放内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u521D_u59CB_u5316_u3011&quot;&gt;&lt;a href=&quot;#u3010_u521D_u59CB_u5316_u3011&quot; class=&quot;headerlink&quot; title=&quot;【初始化】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【初始化】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;执行/sbin/init 生成第一个进程，接管系统控制权，它首先会去读取/etc/inittab文件来执行相应的脚本进行系统初始化，如设置键盘、字体，装载模块，设置网络等。&lt;/li&gt;
&lt;li&gt;系统初始化脚本(/etc/rc.d/rc.sysinit)对系统进行基本的配置，以读写方式挂载根文件系统及其它文件系统，读取各种系统配置,如分区挂载/etc/fstab, 网络配置/etc/sysconfig/network。&lt;/li&gt;
&lt;li&gt;执行/etc/rc.d/rc脚本。该文件定义了服务启动的先后顺序，而具体的每个运行级别的服务状态是放在/etc/rc.d/rc*.d（=0~6）目录下，所有的文件均是指向/etc/init.d下相应文件的符号链接。rc.sysinit通过分析/etc/inittab文件来确定系统的启动级别，然后才去执行/etc/rc.d/rc.d下的文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u7528_u6237_u767B_u5F55_u3011&quot;&gt;&lt;a href=&quot;#u3010_u7528_u6237_u767B_u5F55_u3011&quot; class=&quot;headerlink&quot; title=&quot;【用户登录】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【用户登录】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;命令行登录：init进程调用getty程序（意为get teletype），让用户输入用户名和密码。输入完成后，再调用login程序，核对密码。如果密码正确，就从文件 /etc/passwd 读取该用户指定的shell，然后启动这个shell。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u684C_u9762_u8F7D_u5165_u3011&quot;&gt;&lt;a href=&quot;#u3010_u684C_u9762_u8F7D_u5165_u3011&quot; class=&quot;headerlink&quot; title=&quot;【桌面载入】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【桌面载入】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果有配置图形界面自动启动，则登录成功后，会读取当前用户的~/.xinitrc 文件，启动对应的X窗口系统。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;安装了Arch，顺便梳理一下linux启动流程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010BIOS_28MBR_29_u3011&quot;&gt;&lt;a href=&quot;#u3010BIOS_28MBR_29_u3011&quot; class=&quot;headerlink&quot; title=&quot;【BIOS(MBR)】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【BIOS(MBR)】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;开机自检，通过通过BIOS加载CMOS，获取各种硬件信息。&lt;/li&gt;
&lt;li&gt;按照BIOS 的boot sequeuece顺序读取每一个存储设备的最前面512个字节,如果发现最后两个字节是0x55, oxAA,那么就找到了主引导扇区MBR。&lt;/li&gt;
&lt;li&gt;MBR结构如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://xymlife.com/tags/linux/"/>
    
      <category term="操作系统" scheme="http://xymlife.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Arch</title>
    <link href="http://xymlife.com/2016/01/08/Arch/"/>
    <id>http://xymlife.com/2016/01/08/Arch/</id>
    <published>2016-01-07T16:41:09.000Z</published>
    <updated>2016-01-20T16:41:51.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;这里记录了一些Arch的小知识点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u5206_u533A_u8868_u3011&quot;&gt;&lt;a href=&quot;#u3010_u5206_u533A_u8868_u3011&quot; class=&quot;headerlink&quot; title=&quot;【分区表】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【分区表】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;  MBR(master boot record)：只能有4个主分区，一个拓展分区（也算一个主分区），拓展分区下可以建多个逻辑分区&lt;/p&gt;
&lt;p&gt;GUID：只有主分区，数量不限&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h4 id=&quot;u3010_u683C_u5F0F_u5316_u3011&quot;&gt;&lt;a href=&quot;#u3010_u683C_u5F0F_u5316_u3011&quot; class=&quot;headerlink&quot; title=&quot;【格式化】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【格式化】&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkfs：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkfs.vfat -F32 /dev/sdxy  &lt;span class=&quot;comment&quot;&gt;#vfat32&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkfs.ext4 /dev/sdxy  &lt;span class=&quot;comment&quot;&gt;#ext4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;swap:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkswap /dev/sdxy  &lt;span class=&quot;comment&quot;&gt;# 格式化交换分区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;swapon /dev/sdxy  &lt;span class=&quot;comment&quot;&gt;# 开启交换分区&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010_u6302_u8F7D_u3011&quot;&gt;&lt;a href=&quot;#u3010_u6302_u8F7D_u3011&quot; class=&quot;headerlink&quot; title=&quot;【挂载】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【挂载】&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mount /dev/sdxr /mnt  &lt;span class=&quot;comment&quot;&gt;# 挂载根目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir /mnt/home&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mount /dev/sda2 /mnt/home  &lt;span class=&quot;comment&quot;&gt;# 挂载home目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010fstab_u3011&quot;&gt;&lt;a href=&quot;#u3010fstab_u3011&quot; class=&quot;headerlink&quot; title=&quot;【fstab】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【fstab】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;文件/etc/fstab包含了静态文件系统信息，定义了存储设备和分区整合到整个系统的方式。mount命令会读取这个文件，确定设备和分区的挂载选项。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ls -al /dev/disk/by-uuid  &lt;span class=&quot;comment&quot;&gt;# ubuntu下面查看当前分区的uuid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010tmpfs_u3011&quot;&gt;&lt;a href=&quot;#u3010tmpfs_u3011&quot; class=&quot;headerlink&quot; title=&quot;【tmpfs】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【tmpfs】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;tmpfs(理论是内存一半)是一个临时文件系统，驻留于你的交换分区或是内存中（取决于你的使用情况）。使用它可以提高文件访问速度，并能保证重启时会自动清除这些文件。&lt;br&gt;为用户添加 tmpfs 挂载：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/etc/fstab&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmpfs /www/cache tmpfs rw,size=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;G,nr_inodes=&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;k,noexec,nodev,nosuid,uid=&lt;span class=&quot;number&quot;&gt;648&lt;/span&gt;,gid=&lt;span class=&quot;number&quot;&gt;648&lt;/span&gt;,mode=&lt;span class=&quot;number&quot;&gt;1700&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010chroot_u3011&quot;&gt;&lt;a href=&quot;#u3010chroot_u3011&quot; class=&quot;headerlink&quot; title=&quot;【chroot】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【chroot】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;chroot是将当前磁盘根路径(和当前进程和它们的子进程)更改到另一个根目录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;arch-chroot /mnt /bin/bash&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010pacman_u3011&quot;&gt;&lt;a href=&quot;#u3010pacman_u3011&quot; class=&quot;headerlink&quot; title=&quot;【pacman】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【pacman】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;arch安装包指令&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pacman -S grub os-prober&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010grub_u3011&quot;&gt;&lt;a href=&quot;#u3010grub_u3011&quot; class=&quot;headerlink&quot; title=&quot;【grub】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【grub】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;引导装入器 – 它负责装入内核并引导 Linux 系统&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;grub-mkconfig -o /boot/grub/grub.cfg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010_u521B_u5EFA_u7528_u6237_u7EC4_u3011&quot;&gt;&lt;a href=&quot;#u3010_u521B_u5EFA_u7528_u6237_u7EC4_u3011&quot; class=&quot;headerlink&quot; title=&quot;【创建用户组】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【创建用户组】&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;groupadd users&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;useradd -m -g users -s /bin/bash xym&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;passwd xym&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;visudo(vi /etc/sudoers)  &lt;span class=&quot;comment&quot;&gt;# 执行 xym ALL=(ALL) ALL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;u3010ssh_key_u3011&quot;&gt;&lt;a href=&quot;#u3010ssh_key_u3011&quot; class=&quot;headerlink&quot; title=&quot;【ssh key】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【ssh key】&lt;/strong&gt;&lt;/h4&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh-keygen (-t rsa)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里记录了一些Arch的小知识点。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;u3010_u5206_u533A_u8868_u3011&quot;&gt;&lt;a href=&quot;#u3010_u5206_u533A_u8868_u3011&quot; class=&quot;headerlink&quot; title=&quot;【分区表】&quot;&gt;&lt;/a&gt;&lt;strong&gt;【分区表】&lt;/strong&gt;&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;  MBR(master boot record)：只能有4个主分区，一个拓展分区（也算一个主分区），拓展分区下可以建多个逻辑分区&lt;/p&gt;
&lt;p&gt;GUID：只有主分区，数量不限&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="arch" scheme="http://xymlife.com/tags/arch/"/>
    
      <category term="linux" scheme="http://xymlife.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://xymlife.com/2015/06/22/redis/"/>
    <id>http://xymlife.com/2015/06/22/redis/</id>
    <published>2015-06-22T15:15:53.000Z</published>
    <updated>2016-01-20T16:42:35.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;最近看了下huangz1990写的《redis设计与实现》，做一下笔记。&lt;br&gt;附上源码 &lt;a href=&quot;https://github.com/huangz1990/redis-3.0-annotated&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/huangz1990/redis-3.0-annotated&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u5185_u90E8_u6570_u636E_u7ED3_u6784&quot;&gt;&lt;a href=&quot;#u5185_u90E8_u6570_u636E_u7ED3_u6784&quot; class=&quot;headerlink&quot; title=&quot;内部数据结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;内部数据结构&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【sds】&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sdshdr &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len;  &lt;span class=&quot;comment&quot;&gt;// buf已用长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 剩余空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[]; &lt;span class=&quot;comment&quot;&gt;// 保存字符串的char指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;简单动态字符串：主要用于存储redis里面的字符串对象，不过只有这个对象存储的是字符串的时候，才是sdsi，否则就是long类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;append操作：如果添加后长度超过SDS_MAX_PREALLOC（默认1M），则空间追加加多1M，否则为添加后长度的两倍，显然append的字符串不能超过1M。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以看出一个明显的弊端，就是会有比较多的剩余空间，这部分空间是不会主动释放的，如果要释放需要调用对应的API(sdsRemoveFreeSpace)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;【双端链表】&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; listNode &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; listNode *prev;  &lt;span class=&quot;comment&quot;&gt;//前指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; listNode *next;  &lt;span class=&quot;comment&quot;&gt;//后指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *value;  &lt;span class=&quot;comment&quot;&gt;//值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; listNode;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//链表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; listNode *head;  &lt;span class=&quot;comment&quot;&gt;//头指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; listNode *tail;  &lt;span class=&quot;comment&quot;&gt;//尾指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; len;  &lt;span class=&quot;comment&quot;&gt;//表长&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *(*dup)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr);  &lt;span class=&quot;comment&quot;&gt;//复制函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; (*&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr);  &lt;span class=&quot;comment&quot;&gt;//释放函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; (*match)(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr, &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key);  &lt;span class=&quot;comment&quot;&gt;//对比函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为是无类型指针存值，所以可以保存任意的值,双端队列的优势在于队头尾的操作方便，但是链表的查找效率显然是瓶颈，注意带查找(非头尾)的操作效率。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;【字典】&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dict &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dictType *type;  &lt;span class=&quot;comment&quot;&gt;//处理特定类型的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *privdata;  &lt;span class=&quot;comment&quot;&gt;//处理函数的私有数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dictht ht[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;//用于rehash的滚动数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rehashidx;  &lt;span class=&quot;comment&quot;&gt;//rehash进度，-1标示未开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; iterators;  &lt;span class=&quot;comment&quot;&gt;//正常使用的迭代器数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; dict;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dictht &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dictEntry **table;  &lt;span class=&quot;comment&quot;&gt;//桶，一个指针数组,取模后的值就是对应数组下标&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; size;  &lt;span class=&quot;comment&quot;&gt;//指针数组大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; sizemask;  &lt;span class=&quot;comment&quot;&gt;//取模掩码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; used;  &lt;span class=&quot;comment&quot;&gt;//节点数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; dictht;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dictEntry &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *key;  &lt;span class=&quot;comment&quot;&gt;//键&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &amp;#123;  &lt;span class=&quot;comment&quot;&gt;//值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;uint64_t&lt;/span&gt; u64;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int64_t&lt;/span&gt; s64;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; dictEntry *next;  &lt;span class=&quot;comment&quot;&gt;//下一个指针,取模后值相同的节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; dictEntry;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;rehash是重新建一个大小于现在不同的表，将原来的hash表迁移到这个新的hash表的过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rehash条件：&lt;br&gt;(1) ratio = used/size &amp;gt;= 1，且dict_can_resize为真（持久化操作的时候一般为假）。&lt;br&gt;(2) ratio &amp;gt; dict_force_resize_ratio（默认5）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rehash方式：渐进式(dictRehashStep, dictRehashMilliseconds)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;【跳跃表】&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;跳表是一种神奇的数据结构，依赖随机概率，但是效率却可以和平衡树相媲美，与平衡树相比，编程复杂度低，但是空间复杂度比较高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不知道怎么加图进来，就不多说了，插入是随机插入某一层，查找从最上层开始找，查找，插入，删除都是log(N)（期望值，有最坏的情况，数据量越大越接近期望值）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要用来实现有序集合。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;redis_u6570_u636E_u7C7B_u578B&quot;&gt;&lt;a href=&quot;#redis_u6570_u636E_u7C7B_u578B&quot; class=&quot;headerlink&quot; title=&quot;redis数据类型&quot;&gt;&lt;/a&gt;&lt;strong&gt;redis数据类型&lt;/strong&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; redisObject &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; type:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; notused:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//对齐位&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; encoding:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//编码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; lru:&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;//lru时间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; refcount;  &lt;span class=&quot;comment&quot;&gt;//引用次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr;  &lt;span class=&quot;comment&quot;&gt;//对象值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;redisObject 类型:字符串（整数，字符串）， 列表(双端队列，压缩链表) 有序集合(跳跃表，压缩列表)，哈希表(压缩列表，字典)， 集合(字典，整数集合)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串：REDIS_ENCODING_INT(long)和REDIS_ENCODING_RAW(sds), 除了能表示成long的，其他都保存为sds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;哈希表: 创建空白的哈希表的时候，是用压缩列表的，当哈希表的键或值长度大于某个值时（默认64），或者当节点数大于某个值（默认512）的时候，切换到哈希链表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;列表：先用压缩列表，达到某种条件(与哈希表条件类似)，切换为双端链表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阻塞：先记录相关阻塞信息，如阻塞时间，key，客户端等，server.db[i]-&amp;gt;blocking_keys记录因为某个key被阻塞的客户端（多个）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当push一个值的时候，server.ready_keys-&amp;gt;ready_list添加这个key和对应的DB，并添加对应的值，注意解除阻塞为先阻塞先服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;集合： 如果第一元素能用longlong表示，那么就用intset，否则用哈希表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有序集合：先是ziplist，元素个数大于128时，或者元素长度大于64，转换成跳表。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u4E8B_u52A1&quot;&gt;&lt;a href=&quot;#u4E8B_u52A1&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;&lt;strong&gt;事务&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;redis事务SMEMBERS事务进队，DISCARD取消事务，EXEC执行事务，WATCH监视改动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;watch命令用于事务执行之前监视任意数量的键，如果这些键被改变了，那么事务停止，直接返回失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;watch某个key时，redisDb.wathced_key存储这个key对应的watch客户端,当有对键的操作的时候，会触发查找key是否在watch_key里面，在就会改变客户端的REDIS_DIRTY_CAS,执行事务前会检查这个，如果有那么就回复空，表示失败。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ACID: A(原子性)，C(一致性)，I(隔离性)，D(持久性)， redis里面只有保证了CI。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;lua: 使用lua执行redis函数，当执行自身的函数时，会创建一个伪客户端执行函数，返回给服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;订阅。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;慢查询日志：日志滚动删除。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u5185_u90E8_u8FD0_u4F5C_u673A_u5236&quot;&gt;&lt;a href=&quot;#u5185_u90E8_u8FD0_u4F5C_u673A_u5236&quot; class=&quot;headerlink&quot; title=&quot;内部运作机制&quot;&gt;&lt;/a&gt;&lt;strong&gt;内部运作机制&lt;/strong&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;键过期：保存在expires字典里面，存着每一个键的过期时间，使用定期删除（间隔一段时间清理一次）和惰性删除（用到这个键的时候,才删除）清除键值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RDB: 将内存镜像写入RDB文件(SAVE，BGSAVE),SAVE阻塞， BGSAVE 非阻塞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AOF: 将操作写入AOF日志(BGREWRITEAOF),rewrite. 异步每秒一次,高于BGSAVE。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近看了下huangz1990写的《redis设计与实现》，做一下笔记。&lt;br&gt;附上源码 &lt;a href=&quot;https://github.com/huangz1990/redis-3.0-annotated&quot;&gt;https://github.com/huangz1990/redis-3.0-annotated&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;u5185_u90E8_u6570_u636E_u7ED3_u6784&quot;&gt;&lt;a href=&quot;#u5185_u90E8_u6570_u636E_u7ED3_u6784&quot; class=&quot;headerlink&quot; title=&quot;内部数据结构&quot;&gt;&lt;/a&gt;&lt;strong&gt;内部数据结构&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;【sds】&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sdshdr &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; len;  &lt;span class=&quot;comment&quot;&gt;// buf已用长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;;  &lt;span class=&quot;comment&quot;&gt;// 剩余空间&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; buf[]; &lt;span class=&quot;comment&quot;&gt;// 保存字符串的char指针&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://xymlife.com/tags/redis/"/>
    
      <category term="数据结构" scheme="http://xymlife.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu ratproxy安装使用</title>
    <link href="http://xymlife.com/2015/03/11/ratproxy/"/>
    <id>http://xymlife.com/2015/03/11/ratproxy/</id>
    <published>2015-03-11T02:48:26.000Z</published>
    <updated>2016-01-19T15:48:18.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Google 推出一套免費的 Web 安全評估工具，叫做 RatProxy，這套工具可以檢測、分析您的網站是否有安全性漏洞或網頁是否有被入侵，目前可支援 Linux, FreeBSD, MacOS X, 與 Windows (Cygwin) 等執行環境（反正就是 Unix-like 的環境啦）。&lt;br&gt;RatProxy 可偵測到的漏洞包括 Cross-site Scripting (XSS, 跨網站指令碼)、指令碼惡意置入(script inclusion issues), 惡意網頁內容(content serving problems), insufficient XSRF 以及 XSS 防護(XSS defenses) 等。&lt;br&gt;参考: &lt;a href=&quot;http://wiki.zheng-ji.info/Sec/ratproxy.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://wiki.zheng-ji.info/Sec/ratproxy.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;strong&gt; 1.安装ratproxy &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo apt-get install ratproxy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt; 2.启动ratproxy &lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ratproxy -v logs -w logs/report.log &lt;span class=&quot;operator&quot;&gt;-d&lt;/span&gt; www.baidu.com -lextifscgjm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt; 3.设置代理 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动时没有指定端口,所以默认端口8080,如果有指定端口则浏览器代理设置时填对应端口.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;8080&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt; 4.生成报告 &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先对你测试的网站进行对应该操作,然后相应的检测信息会写到我们启动ratproxy的 -w 指定的文件中,这时候是log文件,不方便我们阅读,需要重定向写到一个html文件中去.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ratproxy-report logs/ratporxy.log &amp;gt; report.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用浏览器打开 report.html文件就可以看到网站的检测结果.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Google 推出一套免費的 Web 安全評估工具，叫做 RatProxy，這套工具可以檢測、分析您的網站是否有安全性漏洞或網頁是否有被入侵，目前可支援 Linux, FreeBSD, MacOS X, 與 Windows (Cygwin) 等執行環境（反正就是 Unix-like 的環境啦）。&lt;br&gt;RatProxy 可偵測到的漏洞包括 Cross-site Scripting (XSS, 跨網站指令碼)、指令碼惡意置入(script inclusion issues), 惡意網頁內容(content serving problems), insufficient XSRF 以及 XSS 防護(XSS defenses) 等。&lt;br&gt;参考: &lt;a href=&quot;http://wiki.zheng-ji.info/Sec/ratproxy.html&quot;&gt;http://wiki.zheng-ji.info/Sec/ratproxy.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="安全" scheme="http://xymlife.com/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="笔记" scheme="http://xymlife.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>hexo常用技巧</title>
    <link href="http://xymlife.com/2015/03/09/hexo-skill/"/>
    <id>http://xymlife.com/2015/03/09/hexo-skill/</id>
    <published>2015-03-09T07:09:09.000Z</published>
    <updated>2016-01-19T15:48:18.000Z</updated>
    
    <content type="html">&lt;ul&gt;
&lt;li&gt;刚刚学习用hexo搭建这个blog,希望在使用过程中总结一些常用的技巧.&lt;/li&gt;
&lt;li&gt;文章的发布,删除,草稿&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u6587_u7AE0&quot;&gt;&lt;a href=&quot;#u6587_u7AE0&quot; class=&quot;headerlink&quot; title=&quot;文章&quot;&gt;&lt;/a&gt;文章&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; 1.文章发布&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建新文章&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new ‘new_article’&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行后可以看到一条info信息,告诉你在source/_posts下面建立了一个new_article.md文件,这个文件就是你的文章,采用md格式&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt; 2.文章删除&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接删除source/_posts下面对应的md文件&lt;/li&gt;
&lt;li&gt;清除相应文件和数据库&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo clean&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;新生成静态文件&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt; 3.文章草稿&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新建草稿 &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new draft “draft_acticle”&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;和文章发布一样,只是md文件生成在了source/_draft,但是这篇文章不会显示在你的网站上面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想预览的话&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server --drafts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;把草稿变成文章&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo publish draft draft_acticle&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;刚刚学习用hexo搭建这个blog,希望在使用过程中总结一些常用的技巧.&lt;/li&gt;
&lt;li&gt;文章的发布,删除,草稿&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u6587_u7AE0&quot;&gt;&lt;a href=&quot;#u6587_u7AE0&quot; class=&quot;headerlink&quot; title=&quot;文章&quot;&gt;&lt;/a&gt;文章&lt;/h2&gt;&lt;p&gt;&lt;strong&gt; 1.文章发布&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建新文章&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new ‘new_article’&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;执行后可以看到一条info信息,告诉你在source/_posts下面建立了一个new_article.md文件,这个文件就是你的文章,采用md格式&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://xymlife.com/tags/hexo/"/>
    
      <category term="技能" scheme="http://xymlife.com/tags/%E6%8A%80%E8%83%BD/"/>
    
  </entry>
  
</feed>
